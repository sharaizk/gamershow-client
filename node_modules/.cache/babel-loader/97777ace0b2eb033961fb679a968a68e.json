{"ast":null,"code":"import _classCallCheck from \"D:/STREAMING_SITE/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/STREAMING_SITE/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport EventEmitter from 'events';\nimport Log from '../utils/logger.js';\nimport LoggingControl from '../utils/logging-control.js';\nimport TransmuxingController from './transmuxing-controller.js';\nimport TransmuxingEvents from './transmuxing-events.js';\nimport TransmuxingWorker from './transmuxing-worker.js';\nimport MediaInfo from './media-info.js';\n\nvar Transmuxer = /*#__PURE__*/function () {\n  function Transmuxer(mediaDataSource, config) {\n    _classCallCheck(this, Transmuxer);\n\n    this.TAG = 'Transmuxer';\n    this._emitter = new EventEmitter();\n\n    if (config.enableWorker && typeof Worker !== 'undefined') {\n      try {\n        var work = require('webworkify');\n\n        this._worker = work(TransmuxingWorker);\n        this._workerDestroying = false;\n\n        this._worker.addEventListener('message', this._onWorkerMessage.bind(this));\n\n        this._worker.postMessage({\n          cmd: 'init',\n          param: [mediaDataSource, config]\n        });\n\n        this.e = {\n          onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this)\n        };\n        LoggingControl.registerListener(this.e.onLoggingConfigChanged);\n\n        this._worker.postMessage({\n          cmd: 'logging_config',\n          param: LoggingControl.getConfig()\n        });\n      } catch (error) {\n        Log.e(this.TAG, 'Error while initialize transmuxing worker, fallback to inline transmuxing');\n        this._worker = null;\n        this._controller = new TransmuxingController(mediaDataSource, config);\n      }\n    } else {\n      this._controller = new TransmuxingController(mediaDataSource, config);\n    }\n\n    if (this._controller) {\n      var ctl = this._controller;\n      ctl.on(TransmuxingEvents.IO_ERROR, this._onIOError.bind(this));\n      ctl.on(TransmuxingEvents.DEMUX_ERROR, this._onDemuxError.bind(this));\n      ctl.on(TransmuxingEvents.INIT_SEGMENT, this._onInitSegment.bind(this));\n      ctl.on(TransmuxingEvents.MEDIA_SEGMENT, this._onMediaSegment.bind(this));\n      ctl.on(TransmuxingEvents.LOADING_COMPLETE, this._onLoadingComplete.bind(this));\n      ctl.on(TransmuxingEvents.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this));\n      ctl.on(TransmuxingEvents.MEDIA_INFO, this._onMediaInfo.bind(this));\n      ctl.on(TransmuxingEvents.METADATA_ARRIVED, this._onMetaDataArrived.bind(this));\n      ctl.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, this._onScriptDataArrived.bind(this));\n      ctl.on(TransmuxingEvents.STATISTICS_INFO, this._onStatisticsInfo.bind(this));\n      ctl.on(TransmuxingEvents.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));\n    }\n  }\n\n  _createClass(Transmuxer, [{\n    key: \"destroy\",\n    value: function destroy() {\n      if (this._worker) {\n        if (!this._workerDestroying) {\n          this._workerDestroying = true;\n\n          this._worker.postMessage({\n            cmd: 'destroy'\n          });\n\n          LoggingControl.removeListener(this.e.onLoggingConfigChanged);\n          this.e = null;\n        }\n      } else {\n        this._controller.destroy();\n\n        this._controller = null;\n      }\n\n      this._emitter.removeAllListeners();\n\n      this._emitter = null;\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, listener) {\n      this._emitter.addListener(event, listener);\n    }\n  }, {\n    key: \"off\",\n    value: function off(event, listener) {\n      this._emitter.removeListener(event, listener);\n    }\n  }, {\n    key: \"hasWorker\",\n    value: function hasWorker() {\n      return this._worker != null;\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      if (this._worker) {\n        this._worker.postMessage({\n          cmd: 'start'\n        });\n      } else {\n        this._controller.start();\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._worker) {\n        this._worker.postMessage({\n          cmd: 'stop'\n        });\n      } else {\n        this._controller.stop();\n      }\n    }\n  }, {\n    key: \"seek\",\n    value: function seek(milliseconds) {\n      if (this._worker) {\n        this._worker.postMessage({\n          cmd: 'seek',\n          param: milliseconds\n        });\n      } else {\n        this._controller.seek(milliseconds);\n      }\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this._worker) {\n        this._worker.postMessage({\n          cmd: 'pause'\n        });\n      } else {\n        this._controller.pause();\n      }\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (this._worker) {\n        this._worker.postMessage({\n          cmd: 'resume'\n        });\n      } else {\n        this._controller.resume();\n      }\n    }\n  }, {\n    key: \"_onInitSegment\",\n    value: function _onInitSegment(type, initSegment) {\n      var _this = this;\n\n      // do async invoke\n      Promise.resolve().then(function () {\n        _this._emitter.emit(TransmuxingEvents.INIT_SEGMENT, type, initSegment);\n      });\n    }\n  }, {\n    key: \"_onMediaSegment\",\n    value: function _onMediaSegment(type, mediaSegment) {\n      var _this2 = this;\n\n      Promise.resolve().then(function () {\n        _this2._emitter.emit(TransmuxingEvents.MEDIA_SEGMENT, type, mediaSegment);\n      });\n    }\n  }, {\n    key: \"_onLoadingComplete\",\n    value: function _onLoadingComplete() {\n      var _this3 = this;\n\n      Promise.resolve().then(function () {\n        _this3._emitter.emit(TransmuxingEvents.LOADING_COMPLETE);\n      });\n    }\n  }, {\n    key: \"_onRecoveredEarlyEof\",\n    value: function _onRecoveredEarlyEof() {\n      var _this4 = this;\n\n      Promise.resolve().then(function () {\n        _this4._emitter.emit(TransmuxingEvents.RECOVERED_EARLY_EOF);\n      });\n    }\n  }, {\n    key: \"_onMediaInfo\",\n    value: function _onMediaInfo(mediaInfo) {\n      var _this5 = this;\n\n      Promise.resolve().then(function () {\n        _this5._emitter.emit(TransmuxingEvents.MEDIA_INFO, mediaInfo);\n      });\n    }\n  }, {\n    key: \"_onMetaDataArrived\",\n    value: function _onMetaDataArrived(metadata) {\n      var _this6 = this;\n\n      Promise.resolve().then(function () {\n        _this6._emitter.emit(TransmuxingEvents.METADATA_ARRIVED, metadata);\n      });\n    }\n  }, {\n    key: \"_onScriptDataArrived\",\n    value: function _onScriptDataArrived(data) {\n      var _this7 = this;\n\n      Promise.resolve().then(function () {\n        _this7._emitter.emit(TransmuxingEvents.SCRIPTDATA_ARRIVED, data);\n      });\n    }\n  }, {\n    key: \"_onStatisticsInfo\",\n    value: function _onStatisticsInfo(statisticsInfo) {\n      var _this8 = this;\n\n      Promise.resolve().then(function () {\n        _this8._emitter.emit(TransmuxingEvents.STATISTICS_INFO, statisticsInfo);\n      });\n    }\n  }, {\n    key: \"_onIOError\",\n    value: function _onIOError(type, info) {\n      var _this9 = this;\n\n      Promise.resolve().then(function () {\n        _this9._emitter.emit(TransmuxingEvents.IO_ERROR, type, info);\n      });\n    }\n  }, {\n    key: \"_onDemuxError\",\n    value: function _onDemuxError(type, info) {\n      var _this10 = this;\n\n      Promise.resolve().then(function () {\n        _this10._emitter.emit(TransmuxingEvents.DEMUX_ERROR, type, info);\n      });\n    }\n  }, {\n    key: \"_onRecommendSeekpoint\",\n    value: function _onRecommendSeekpoint(milliseconds) {\n      var _this11 = this;\n\n      Promise.resolve().then(function () {\n        _this11._emitter.emit(TransmuxingEvents.RECOMMEND_SEEKPOINT, milliseconds);\n      });\n    }\n  }, {\n    key: \"_onLoggingConfigChanged\",\n    value: function _onLoggingConfigChanged(config) {\n      if (this._worker) {\n        this._worker.postMessage({\n          cmd: 'logging_config',\n          param: config\n        });\n      }\n    }\n  }, {\n    key: \"_onWorkerMessage\",\n    value: function _onWorkerMessage(e) {\n      var message = e.data;\n      var data = message.data;\n\n      if (message.msg === 'destroyed' || this._workerDestroying) {\n        this._workerDestroying = false;\n\n        this._worker.terminate();\n\n        this._worker = null;\n        return;\n      }\n\n      switch (message.msg) {\n        case TransmuxingEvents.INIT_SEGMENT:\n        case TransmuxingEvents.MEDIA_SEGMENT:\n          this._emitter.emit(message.msg, data.type, data.data);\n\n          break;\n\n        case TransmuxingEvents.LOADING_COMPLETE:\n        case TransmuxingEvents.RECOVERED_EARLY_EOF:\n          this._emitter.emit(message.msg);\n\n          break;\n\n        case TransmuxingEvents.MEDIA_INFO:\n          Object.setPrototypeOf(data, MediaInfo.prototype);\n\n          this._emitter.emit(message.msg, data);\n\n          break;\n\n        case TransmuxingEvents.METADATA_ARRIVED:\n        case TransmuxingEvents.SCRIPTDATA_ARRIVED:\n        case TransmuxingEvents.STATISTICS_INFO:\n          this._emitter.emit(message.msg, data);\n\n          break;\n\n        case TransmuxingEvents.IO_ERROR:\n        case TransmuxingEvents.DEMUX_ERROR:\n          this._emitter.emit(message.msg, data.type, data.info);\n\n          break;\n\n        case TransmuxingEvents.RECOMMEND_SEEKPOINT:\n          this._emitter.emit(message.msg, data);\n\n          break;\n\n        case 'logcat_callback':\n          Log.emitter.emit('log', data.type, data.logcat);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }]);\n\n  return Transmuxer;\n}();\n\nexport default Transmuxer;","map":{"version":3,"sources":["D:/STREAMING_SITE/client/node_modules/flv.js/src/core/transmuxer.js"],"names":["EventEmitter","Log","LoggingControl","TransmuxingController","TransmuxingEvents","TransmuxingWorker","MediaInfo","Transmuxer","mediaDataSource","config","TAG","_emitter","enableWorker","Worker","work","require","_worker","_workerDestroying","addEventListener","_onWorkerMessage","bind","postMessage","cmd","param","e","onLoggingConfigChanged","_onLoggingConfigChanged","registerListener","getConfig","error","_controller","ctl","on","IO_ERROR","_onIOError","DEMUX_ERROR","_onDemuxError","INIT_SEGMENT","_onInitSegment","MEDIA_SEGMENT","_onMediaSegment","LOADING_COMPLETE","_onLoadingComplete","RECOVERED_EARLY_EOF","_onRecoveredEarlyEof","MEDIA_INFO","_onMediaInfo","METADATA_ARRIVED","_onMetaDataArrived","SCRIPTDATA_ARRIVED","_onScriptDataArrived","STATISTICS_INFO","_onStatisticsInfo","RECOMMEND_SEEKPOINT","_onRecommendSeekpoint","removeListener","destroy","removeAllListeners","event","listener","addListener","start","stop","milliseconds","seek","pause","resume","type","initSegment","Promise","resolve","then","emit","mediaSegment","mediaInfo","metadata","data","statisticsInfo","info","message","msg","terminate","Object","setPrototypeOf","prototype","emitter","logcat"],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\nimport Log from '../utils/logger.js';\nimport LoggingControl from '../utils/logging-control.js';\nimport TransmuxingController from './transmuxing-controller.js';\nimport TransmuxingEvents from './transmuxing-events.js';\nimport TransmuxingWorker from './transmuxing-worker.js';\nimport MediaInfo from './media-info.js';\n\nclass Transmuxer {\n\n    constructor(mediaDataSource, config) {\n        this.TAG = 'Transmuxer';\n        this._emitter = new EventEmitter();\n\n        if (config.enableWorker && typeof (Worker) !== 'undefined') {\n            try {\n                let work = require('webworkify');\n                this._worker = work(TransmuxingWorker);\n                this._workerDestroying = false;\n                this._worker.addEventListener('message', this._onWorkerMessage.bind(this));\n                this._worker.postMessage({cmd: 'init', param: [mediaDataSource, config]});\n                this.e = {\n                    onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this)\n                };\n                LoggingControl.registerListener(this.e.onLoggingConfigChanged);\n                this._worker.postMessage({cmd: 'logging_config', param: LoggingControl.getConfig()});\n            } catch (error) {\n                Log.e(this.TAG, 'Error while initialize transmuxing worker, fallback to inline transmuxing');\n                this._worker = null;\n                this._controller = new TransmuxingController(mediaDataSource, config);\n            }\n        } else {\n            this._controller = new TransmuxingController(mediaDataSource, config);\n        }\n\n        if (this._controller) {\n            let ctl = this._controller;\n            ctl.on(TransmuxingEvents.IO_ERROR, this._onIOError.bind(this));\n            ctl.on(TransmuxingEvents.DEMUX_ERROR, this._onDemuxError.bind(this));\n            ctl.on(TransmuxingEvents.INIT_SEGMENT, this._onInitSegment.bind(this));\n            ctl.on(TransmuxingEvents.MEDIA_SEGMENT, this._onMediaSegment.bind(this));\n            ctl.on(TransmuxingEvents.LOADING_COMPLETE, this._onLoadingComplete.bind(this));\n            ctl.on(TransmuxingEvents.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this));\n            ctl.on(TransmuxingEvents.MEDIA_INFO, this._onMediaInfo.bind(this));\n            ctl.on(TransmuxingEvents.METADATA_ARRIVED, this._onMetaDataArrived.bind(this));\n            ctl.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, this._onScriptDataArrived.bind(this));\n            ctl.on(TransmuxingEvents.STATISTICS_INFO, this._onStatisticsInfo.bind(this));\n            ctl.on(TransmuxingEvents.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));\n        }\n    }\n\n    destroy() {\n        if (this._worker) {\n            if (!this._workerDestroying) {\n                this._workerDestroying = true;\n                this._worker.postMessage({cmd: 'destroy'});\n                LoggingControl.removeListener(this.e.onLoggingConfigChanged);\n                this.e = null;\n            }\n        } else {\n            this._controller.destroy();\n            this._controller = null;\n        }\n        this._emitter.removeAllListeners();\n        this._emitter = null;\n    }\n\n    on(event, listener) {\n        this._emitter.addListener(event, listener);\n    }\n\n    off(event, listener) {\n        this._emitter.removeListener(event, listener);\n    }\n\n    hasWorker() {\n        return this._worker != null;\n    }\n\n    open() {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'start'});\n        } else {\n            this._controller.start();\n        }\n    }\n\n    close() {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'stop'});\n        } else {\n            this._controller.stop();\n        }\n    }\n\n    seek(milliseconds) {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'seek', param: milliseconds});\n        } else {\n            this._controller.seek(milliseconds);\n        }\n    }\n\n    pause() {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'pause'});\n        } else {\n            this._controller.pause();\n        }\n    }\n\n    resume() {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'resume'});\n        } else {\n            this._controller.resume();\n        }\n    }\n\n    _onInitSegment(type, initSegment) {\n        // do async invoke\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.INIT_SEGMENT, type, initSegment);\n        });\n    }\n\n    _onMediaSegment(type, mediaSegment) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.MEDIA_SEGMENT, type, mediaSegment);\n        });\n    }\n\n    _onLoadingComplete() {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.LOADING_COMPLETE);\n        });\n    }\n\n    _onRecoveredEarlyEof() {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.RECOVERED_EARLY_EOF);\n        });\n    }\n\n    _onMediaInfo(mediaInfo) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.MEDIA_INFO, mediaInfo);\n        });\n    }\n\n    _onMetaDataArrived(metadata) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.METADATA_ARRIVED, metadata);\n        });\n    }\n\n    _onScriptDataArrived(data) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.SCRIPTDATA_ARRIVED, data);\n        });\n    }\n\n    _onStatisticsInfo(statisticsInfo) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.STATISTICS_INFO, statisticsInfo);\n        });\n    }\n\n    _onIOError(type, info) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.IO_ERROR, type, info);\n        });\n    }\n\n    _onDemuxError(type, info) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.DEMUX_ERROR, type, info);\n        });\n    }\n\n    _onRecommendSeekpoint(milliseconds) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.RECOMMEND_SEEKPOINT, milliseconds);\n        });\n    }\n\n    _onLoggingConfigChanged(config) {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'logging_config', param: config});\n        }\n    }\n\n    _onWorkerMessage(e) {\n        let message = e.data;\n        let data = message.data;\n\n        if (message.msg === 'destroyed' || this._workerDestroying) {\n            this._workerDestroying = false;\n            this._worker.terminate();\n            this._worker = null;\n            return;\n        }\n\n        switch (message.msg) {\n            case TransmuxingEvents.INIT_SEGMENT:\n            case TransmuxingEvents.MEDIA_SEGMENT:\n                this._emitter.emit(message.msg, data.type, data.data);\n                break;\n            case TransmuxingEvents.LOADING_COMPLETE:\n            case TransmuxingEvents.RECOVERED_EARLY_EOF:\n                this._emitter.emit(message.msg);\n                break;\n            case TransmuxingEvents.MEDIA_INFO:\n                Object.setPrototypeOf(data, MediaInfo.prototype);\n                this._emitter.emit(message.msg, data);\n                break;\n            case TransmuxingEvents.METADATA_ARRIVED:\n            case TransmuxingEvents.SCRIPTDATA_ARRIVED:\n            case TransmuxingEvents.STATISTICS_INFO:\n                this._emitter.emit(message.msg, data);\n                break;\n            case TransmuxingEvents.IO_ERROR:\n            case TransmuxingEvents.DEMUX_ERROR:\n                this._emitter.emit(message.msg, data.type, data.info);\n                break;\n            case TransmuxingEvents.RECOMMEND_SEEKPOINT:\n                this._emitter.emit(message.msg, data);\n                break;\n            case 'logcat_callback':\n                Log.emitter.emit('log', data.type, data.logcat);\n                break;\n            default:\n                break;\n        }\n    }\n\n}\n\nexport default Transmuxer;"]},"metadata":{},"sourceType":"module"}