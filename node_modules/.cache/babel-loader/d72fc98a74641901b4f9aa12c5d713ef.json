{"ast":null,"code":"import _classCallCheck from \"D:/STREAMING_SITE/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/STREAMING_SITE/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport EventEmitter from 'events';\nimport PlayerEvents from './player-events.js';\nimport { createDefaultConfig } from '../config.js';\nimport { InvalidArgumentException, IllegalStateException } from '../utils/exception.js'; // Player wrapper for browser's native player (HTMLVideoElement) without MediaSource src. \n\nvar NativePlayer = /*#__PURE__*/function () {\n  function NativePlayer(mediaDataSource, config) {\n    _classCallCheck(this, NativePlayer);\n\n    this.TAG = 'NativePlayer';\n    this._type = 'NativePlayer';\n    this._emitter = new EventEmitter();\n    this._config = createDefaultConfig();\n\n    if (typeof config === 'object') {\n      Object.assign(this._config, config);\n    }\n\n    if (mediaDataSource.type.toLowerCase() === 'flv') {\n      throw new InvalidArgumentException('NativePlayer does\\'t support flv MediaDataSource input!');\n    }\n\n    if (mediaDataSource.hasOwnProperty('segments')) {\n      throw new InvalidArgumentException(\"NativePlayer(\".concat(mediaDataSource.type, \") doesn't support multipart playback!\"));\n    }\n\n    this.e = {\n      onvLoadedMetadata: this._onvLoadedMetadata.bind(this)\n    };\n    this._pendingSeekTime = null;\n    this._statisticsReporter = null;\n    this._mediaDataSource = mediaDataSource;\n    this._mediaElement = null;\n  }\n\n  _createClass(NativePlayer, [{\n    key: \"destroy\",\n    value: function destroy() {\n      if (this._mediaElement) {\n        this.unload();\n        this.detachMediaElement();\n      }\n\n      this.e = null;\n      this._mediaDataSource = null;\n\n      this._emitter.removeAllListeners();\n\n      this._emitter = null;\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, listener) {\n      var _this = this;\n\n      if (event === PlayerEvents.MEDIA_INFO) {\n        if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n          // HAVE_NOTHING\n          Promise.resolve().then(function () {\n            _this._emitter.emit(PlayerEvents.MEDIA_INFO, _this.mediaInfo);\n          });\n        }\n      } else if (event === PlayerEvents.STATISTICS_INFO) {\n        if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n          Promise.resolve().then(function () {\n            _this._emitter.emit(PlayerEvents.STATISTICS_INFO, _this.statisticsInfo);\n          });\n        }\n      }\n\n      this._emitter.addListener(event, listener);\n    }\n  }, {\n    key: \"off\",\n    value: function off(event, listener) {\n      this._emitter.removeListener(event, listener);\n    }\n  }, {\n    key: \"attachMediaElement\",\n    value: function attachMediaElement(mediaElement) {\n      this._mediaElement = mediaElement;\n      mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n      if (this._pendingSeekTime != null) {\n        try {\n          mediaElement.currentTime = this._pendingSeekTime;\n          this._pendingSeekTime = null;\n        } catch (e) {// IE11 may throw InvalidStateError if readyState === 0\n          // Defer set currentTime operation after loadedmetadata\n        }\n      }\n    }\n  }, {\n    key: \"detachMediaElement\",\n    value: function detachMediaElement() {\n      if (this._mediaElement) {\n        this._mediaElement.src = '';\n\n        this._mediaElement.removeAttribute('src');\n\n        this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n        this._mediaElement = null;\n      }\n\n      if (this._statisticsReporter != null) {\n        window.clearInterval(this._statisticsReporter);\n        this._statisticsReporter = null;\n      }\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      if (!this._mediaElement) {\n        throw new IllegalStateException('HTMLMediaElement must be attached before load()!');\n      }\n\n      this._mediaElement.src = this._mediaDataSource.url;\n\n      if (this._mediaElement.readyState > 0) {\n        this._mediaElement.currentTime = 0;\n      }\n\n      this._mediaElement.preload = 'auto';\n\n      this._mediaElement.load();\n\n      this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);\n    }\n  }, {\n    key: \"unload\",\n    value: function unload() {\n      if (this._mediaElement) {\n        this._mediaElement.src = '';\n\n        this._mediaElement.removeAttribute('src');\n      }\n\n      if (this._statisticsReporter != null) {\n        window.clearInterval(this._statisticsReporter);\n        this._statisticsReporter = null;\n      }\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      return this._mediaElement.play();\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this._mediaElement.pause();\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    }\n  }, {\n    key: \"buffered\",\n    get: function get() {\n      return this._mediaElement.buffered;\n    }\n  }, {\n    key: \"duration\",\n    get: function get() {\n      return this._mediaElement.duration;\n    }\n  }, {\n    key: \"volume\",\n    get: function get() {\n      return this._mediaElement.volume;\n    },\n    set: function set(value) {\n      this._mediaElement.volume = value;\n    }\n  }, {\n    key: \"muted\",\n    get: function get() {\n      return this._mediaElement.muted;\n    },\n    set: function set(muted) {\n      this._mediaElement.muted = muted;\n    }\n  }, {\n    key: \"currentTime\",\n    get: function get() {\n      if (this._mediaElement) {\n        return this._mediaElement.currentTime;\n      }\n\n      return 0;\n    },\n    set: function set(seconds) {\n      if (this._mediaElement) {\n        this._mediaElement.currentTime = seconds;\n      } else {\n        this._pendingSeekTime = seconds;\n      }\n    }\n  }, {\n    key: \"mediaInfo\",\n    get: function get() {\n      var mediaPrefix = this._mediaElement instanceof HTMLAudioElement ? 'audio/' : 'video/';\n      var info = {\n        mimeType: mediaPrefix + this._mediaDataSource.type\n      };\n\n      if (this._mediaElement) {\n        info.duration = Math.floor(this._mediaElement.duration * 1000);\n\n        if (this._mediaElement instanceof HTMLVideoElement) {\n          info.width = this._mediaElement.videoWidth;\n          info.height = this._mediaElement.videoHeight;\n        }\n      }\n\n      return info;\n    }\n  }, {\n    key: \"statisticsInfo\",\n    get: function get() {\n      var info = {\n        playerType: this._type,\n        url: this._mediaDataSource.url\n      };\n\n      if (!(this._mediaElement instanceof HTMLVideoElement)) {\n        return info;\n      }\n\n      var hasQualityInfo = true;\n      var decoded = 0;\n      var dropped = 0;\n\n      if (this._mediaElement.getVideoPlaybackQuality) {\n        var quality = this._mediaElement.getVideoPlaybackQuality();\n\n        decoded = quality.totalVideoFrames;\n        dropped = quality.droppedVideoFrames;\n      } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n        decoded = this._mediaElement.webkitDecodedFrameCount;\n        dropped = this._mediaElement.webkitDroppedFrameCount;\n      } else {\n        hasQualityInfo = false;\n      }\n\n      if (hasQualityInfo) {\n        info.decodedFrames = decoded;\n        info.droppedFrames = dropped;\n      }\n\n      return info;\n    }\n  }, {\n    key: \"_onvLoadedMetadata\",\n    value: function _onvLoadedMetadata(e) {\n      if (this._pendingSeekTime != null) {\n        this._mediaElement.currentTime = this._pendingSeekTime;\n        this._pendingSeekTime = null;\n      }\n\n      this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n    }\n  }, {\n    key: \"_reportStatisticsInfo\",\n    value: function _reportStatisticsInfo() {\n      this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n    }\n  }]);\n\n  return NativePlayer;\n}();\n\nexport default NativePlayer;","map":{"version":3,"sources":["D:/STREAMING_SITE/client/node_modules/flv.js/src/player/native-player.js"],"names":["EventEmitter","PlayerEvents","createDefaultConfig","InvalidArgumentException","IllegalStateException","NativePlayer","mediaDataSource","config","TAG","_type","_emitter","_config","Object","assign","type","toLowerCase","hasOwnProperty","e","onvLoadedMetadata","_onvLoadedMetadata","bind","_pendingSeekTime","_statisticsReporter","_mediaDataSource","_mediaElement","unload","detachMediaElement","removeAllListeners","event","listener","MEDIA_INFO","readyState","Promise","resolve","then","emit","mediaInfo","STATISTICS_INFO","statisticsInfo","addListener","removeListener","mediaElement","addEventListener","currentTime","src","removeAttribute","removeEventListener","window","clearInterval","url","preload","load","setInterval","_reportStatisticsInfo","statisticsInfoReportInterval","play","pause","buffered","duration","volume","value","muted","seconds","mediaPrefix","HTMLAudioElement","info","mimeType","Math","floor","HTMLVideoElement","width","videoWidth","height","videoHeight","playerType","hasQualityInfo","decoded","dropped","getVideoPlaybackQuality","quality","totalVideoFrames","droppedVideoFrames","webkitDecodedFrameCount","undefined","webkitDroppedFrameCount","decodedFrames","droppedFrames"],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\nimport PlayerEvents from './player-events.js';\nimport {createDefaultConfig} from '../config.js';\nimport {InvalidArgumentException, IllegalStateException} from '../utils/exception.js';\n\n// Player wrapper for browser's native player (HTMLVideoElement) without MediaSource src. \nclass NativePlayer {\n\n    constructor(mediaDataSource, config) {\n        this.TAG = 'NativePlayer';\n        this._type = 'NativePlayer';\n        this._emitter = new EventEmitter();\n\n        this._config = createDefaultConfig();\n        if (typeof config === 'object') {\n            Object.assign(this._config, config);\n        }\n\n        if (mediaDataSource.type.toLowerCase() === 'flv') {\n            throw new InvalidArgumentException('NativePlayer does\\'t support flv MediaDataSource input!');\n        }\n        if (mediaDataSource.hasOwnProperty('segments')) {\n            throw new InvalidArgumentException(`NativePlayer(${mediaDataSource.type}) doesn't support multipart playback!`);\n        }\n\n        this.e = {\n            onvLoadedMetadata: this._onvLoadedMetadata.bind(this)\n        };\n\n        this._pendingSeekTime = null;\n        this._statisticsReporter = null;\n\n        this._mediaDataSource = mediaDataSource;\n        this._mediaElement = null;\n    }\n\n    destroy() {\n        if (this._mediaElement) {\n            this.unload();\n            this.detachMediaElement();\n        }\n        this.e = null;\n        this._mediaDataSource = null;\n        this._emitter.removeAllListeners();\n        this._emitter = null;\n    }\n\n    on(event, listener) {\n        if (event === PlayerEvents.MEDIA_INFO) {\n            if (this._mediaElement != null && this._mediaElement.readyState !== 0) {  // HAVE_NOTHING\n                Promise.resolve().then(() => {\n                    this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n                });\n            }\n        } else if (event === PlayerEvents.STATISTICS_INFO) {\n            if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n                Promise.resolve().then(() => {\n                    this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n                });\n            }\n        }\n        this._emitter.addListener(event, listener);\n    }\n\n    off(event, listener) {\n        this._emitter.removeListener(event, listener);\n    }\n\n    attachMediaElement(mediaElement) {\n        this._mediaElement = mediaElement;\n        mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n        if (this._pendingSeekTime != null) {\n            try {\n                mediaElement.currentTime = this._pendingSeekTime;\n                this._pendingSeekTime = null;\n            } catch (e) {\n                // IE11 may throw InvalidStateError if readyState === 0\n                // Defer set currentTime operation after loadedmetadata\n            }\n        }\n    }\n\n    detachMediaElement() {\n        if (this._mediaElement) {\n            this._mediaElement.src = '';\n            this._mediaElement.removeAttribute('src');\n            this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n            this._mediaElement = null;\n        }\n        if (this._statisticsReporter != null) {\n            window.clearInterval(this._statisticsReporter);\n            this._statisticsReporter = null;\n        }\n    }\n\n    load() {\n        if (!this._mediaElement) {\n            throw new IllegalStateException('HTMLMediaElement must be attached before load()!');\n        }\n        this._mediaElement.src = this._mediaDataSource.url;\n\n        if (this._mediaElement.readyState > 0) {\n            this._mediaElement.currentTime = 0;\n        }\n\n        this._mediaElement.preload = 'auto';\n        this._mediaElement.load();\n        this._statisticsReporter = window.setInterval(\n            this._reportStatisticsInfo.bind(this),\n        this._config.statisticsInfoReportInterval);\n    }\n\n    unload() {\n        if (this._mediaElement) {\n            this._mediaElement.src = '';\n            this._mediaElement.removeAttribute('src');\n        }\n        if (this._statisticsReporter != null) {\n            window.clearInterval(this._statisticsReporter);\n            this._statisticsReporter = null;\n        }\n    }\n\n    play() {\n        return this._mediaElement.play();\n    }\n\n    pause() {\n        this._mediaElement.pause();\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    get buffered() {\n        return this._mediaElement.buffered;\n    }\n\n    get duration() {\n        return this._mediaElement.duration;\n    }\n\n    get volume() {\n        return this._mediaElement.volume;\n    }\n\n    set volume(value) {\n        this._mediaElement.volume = value;\n    }\n\n    get muted() {\n        return this._mediaElement.muted;\n    }\n\n    set muted(muted) {\n        this._mediaElement.muted = muted;\n    }\n\n    get currentTime() {\n        if (this._mediaElement) {\n            return this._mediaElement.currentTime;\n        }\n        return 0;\n    }\n\n    set currentTime(seconds) {\n        if (this._mediaElement) {\n            this._mediaElement.currentTime = seconds;\n        } else {\n            this._pendingSeekTime = seconds;\n        }\n    }\n\n    get mediaInfo() {\n        let mediaPrefix = (this._mediaElement instanceof HTMLAudioElement) ? 'audio/' : 'video/';\n        let info = {\n            mimeType: mediaPrefix + this._mediaDataSource.type\n        };\n        if (this._mediaElement) {\n            info.duration = Math.floor(this._mediaElement.duration * 1000);\n            if (this._mediaElement instanceof HTMLVideoElement) {\n                info.width = this._mediaElement.videoWidth;\n                info.height = this._mediaElement.videoHeight;\n            }\n        }\n        return info;\n    }\n\n    get statisticsInfo() {\n        let info = {\n            playerType: this._type,\n            url: this._mediaDataSource.url\n        };\n\n        if (!(this._mediaElement instanceof HTMLVideoElement)) {\n            return info;\n        }\n\n        let hasQualityInfo = true;\n        let decoded = 0;\n        let dropped = 0;\n\n        if (this._mediaElement.getVideoPlaybackQuality) {\n            let quality = this._mediaElement.getVideoPlaybackQuality();\n            decoded = quality.totalVideoFrames;\n            dropped = quality.droppedVideoFrames;\n        } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n            decoded = this._mediaElement.webkitDecodedFrameCount;\n            dropped = this._mediaElement.webkitDroppedFrameCount;\n        } else {\n            hasQualityInfo = false;\n        }\n\n        if (hasQualityInfo) {\n            info.decodedFrames = decoded;\n            info.droppedFrames = dropped;\n        }\n        \n        return info;\n    }\n\n    _onvLoadedMetadata(e) {\n        if (this._pendingSeekTime != null) {\n            this._mediaElement.currentTime = this._pendingSeekTime;\n            this._pendingSeekTime = null;\n        }\n        this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n    }\n\n    _reportStatisticsInfo() {\n        this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n    }\n\n}\n\nexport default NativePlayer;"]},"metadata":{},"sourceType":"module"}