{"ast":null,"code":"var _jsxFileName = \"D:\\\\STREAMING_SITE\\\\client\\\\src\\\\component\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"fieldLabel\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          autoComplete: \"off\",\n          className: \"text-field\",\n          placeholder: label,\n          ...input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }, this), this.renderError(meta)]\n      }, void 0, true);\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"createStream\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"createForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          id: \"createLabel\",\n          children: \"Create A Stream\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            name: \"title\",\n            component: this.renderInput,\n            label: \"Enter Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            name: \"description\",\n            component: this.renderInput,\n            label: \"Enter Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit_btn\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a Description\";\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);","map":{"version":3,"sources":["D:/STREAMING_SITE/client/src/component/streams/StreamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","StreamCreate","Component","renderInput","input","label","meta","renderError","onSubmit","formValues","props","error","touched","render","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport {connect} from 'react-redux'\r\nimport {createStream} from '../../actions'\r\nclass StreamCreate extends React.Component{\r\n\r\n    renderError({error, touched}){\r\n        if(touched && error){\r\n            return(\r\n                <div className=\"error-message\">\r\n                    {error}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    renderInput=({input, label, meta})=>{\r\n\r\n        return (\r\n            <>\r\n                <label className=\"fieldLabel\">{label}</label>\r\n                <br />\r\n                <input autoComplete=\"off\" className=\"text-field\" placeholder={label} {...input}/>\r\n                {this.renderError(meta)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    onSubmit =(formValues)=>{\r\n        this.props.createStream(formValues)\r\n    }\r\n    \r\n    render(){\r\n    return(\r\n        <div className=\"createStream\">\r\n \r\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"createForm\">\r\n            <h4 id=\"createLabel\">Create A Stream</h4>\r\n                <div className=\"field\">\r\n\r\n                <Field  name=\"title\" component ={this.renderInput} label=\"Enter Title\"/>\r\n                <Field name=\"description\" component={this.renderInput} label=\"Enter Description\"/>\r\n                <button  className=\"submit_btn\">Submit</button>\r\n                </div >\r\n            </form>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nconst validate = (formValues) =>{\r\n    const errors={}\r\n\r\n    if(!formValues.title){\r\n        errors.title='You must enter a title'\r\n    }\r\n    if(!formValues.description){\r\n        errors.description=\"You must enter a Description\"\r\n    }\r\n    return errors\r\n}\r\n\r\nconst formWrapped = reduxForm({\r\n    form: 'streamCreate',\r\n    validate\r\n})(StreamCreate)\r\n\r\nexport default connect(null, {createStream})(formWrapped)"]},"metadata":{},"sourceType":"module"}