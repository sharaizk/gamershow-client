{"ast":null,"code":"var _jsxFileName = \"D:\\\\STREAMING_SITE\\\\client\\\\src\\\\component\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Alert(props) {\n  return /*#__PURE__*/_jsxDEV(MuiAlert, {\n    elevation: 6,\n    variant: \"filled\",\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 12\n  }, this);\n}\n\n_c = Alert;\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false\n    };\n\n    this.handleClick = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = (event, reason) => {\n      if (reason === 'clickaway') {\n        return;\n      }\n\n      this.setState({\n        open: false\n      });\n    };\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"fieldLabel\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          autoComplete: \"off\",\n          className: \"text-field\",\n          placeholder: label,\n          ...input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this), this.renderError(meta)]\n      }, void 0, true);\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"createStream\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"createForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          id: \"createLabel\",\n          children: \"Create Stream\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.props.handleSubmit(this.onSubmit),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"field\",\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              name: \"title\",\n              component: this.renderInput,\n              label: \"Enter Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              name: \"description\",\n              component: this.renderInput,\n              label: \"Enter Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"submit_btn\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n          autoHideDuration: 6000,\n          onClose: this.handleClose(),\n          children: /*#__PURE__*/_jsxDEV(Alert, {\n            onClose: this.handleClose(),\n            severity: \"success\",\n            children: \"Stream Created\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a Description\";\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);\n\nvar _c;\n\n$RefreshReg$(_c, \"Alert\");","map":{"version":3,"sources":["D:/STREAMING_SITE/client/src/component/streams/StreamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","Snackbar","MuiAlert","Alert","props","StreamCreate","Component","state","open","handleClick","setState","handleClose","event","reason","renderInput","input","label","meta","renderError","onSubmit","formValues","error","touched","render","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport {connect} from 'react-redux'\r\nimport {createStream} from '../../actions'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nclass StreamCreate extends React.Component{\r\n    state={\r\n        open:false\r\n    }\r\n\r\n    // FOR SNACKBARS\r\n    handleClick = () => {\r\n            this.setState({\r\n                open:true\r\n            });\r\n      };\r\n    handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n        this.setState({\r\n            open:false\r\n        })\r\n    };\r\n    renderError({error, touched}){\r\n        if(touched && error){\r\n            return(\r\n                <div className=\"error-message\">\r\n                    {error}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    renderInput=({input, label, meta})=>{\r\n\r\n        return (\r\n            <>\r\n                <label className=\"fieldLabel\">{label}</label>\r\n                <br />\r\n                <input autoComplete=\"off\" className=\"text-field\" placeholder={label} {...input}/>\r\n                {this.renderError(meta)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    onSubmit =(formValues)=>{\r\n        this.props.createStream(formValues)\r\n    }\r\n    \r\n    render(){\r\n    return(\r\n        <div className=\"createStream\">\r\n            <div className=\"createForm\">\r\n            <h4 id=\"createLabel\">Create Stream</h4>\r\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} >\r\n                <div className=\"field\">\r\n                <Field  name=\"title\" component ={this.renderInput} label=\"Enter Title\"/>\r\n                <Field name=\"description\" component={this.renderInput} label=\"Enter Description\"/>\r\n                <button  className=\"submit_btn\">Submit</button>\r\n                </div >\r\n            </form>\r\n            <Snackbar  autoHideDuration={6000} onClose={this.handleClose()}>\r\n                <Alert onClose={this.handleClose()} severity=\"success\">\r\n                    Stream Created\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nconst validate = (formValues) =>{\r\n    const errors={}\r\n\r\n    if(!formValues.title){\r\n        errors.title='You must enter a title'\r\n    }\r\n    if(!formValues.description){\r\n        errors.description=\"You must enter a Description\"\r\n    }\r\n    return errors\r\n}\r\n\r\nconst formWrapped = reduxForm({\r\n    form: 'streamCreate',\r\n    validate\r\n})(StreamCreate)\r\n\r\nexport default connect(null, {createStream})(formWrapped)"]},"metadata":{},"sourceType":"module"}