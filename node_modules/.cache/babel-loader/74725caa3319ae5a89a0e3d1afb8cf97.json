{"ast":null,"code":"import server from '../api/server';\nimport history from '../history';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM, SUC_SNACK, SIGN_UP, PSIGN_IN, CHK_TKN, PSIGN_OUT } from './types';\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const signUp = (formValues, gender) => {\n  const {\n    name,\n    username,\n    email,\n    password\n  } = formValues;\n  return async dispatch => {\n    try {\n      const response = await server.post('/register', {\n        name,\n        username,\n        email,\n        password,\n        gender\n      });\n      dispatch({\n        type: SIGN_UP,\n        payload: response.data.userId\n      });\n      history.push('/login');\n    } catch (e) {\n      alert(e.response.data.error);\n    }\n  };\n};\nexport const psignIn = formValues => {\n  const {\n    username,\n    password\n  } = formValues;\n  return async dispatch => {\n    try {\n      const res = await fetch('/login', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n\n      if (res.status !== 400) {\n        const data = await res.json();\n        dispatch({\n          type: PSIGN_IN,\n          payload: data._id\n        });\n        history.push('/home');\n      } else {\n        const error = new Error(\"Invalid Credentials\");\n        throw error;\n      }\n    } catch (e) {\n      alert(e);\n    }\n  };\n};\nexport const psignOut = () => {\n  return async dispatch => {\n    try {\n      const res = await fetch('https://streamshow-backend.herokuapp.com/logout', {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (res.status === 200) {\n        dispatch({\n          type: PSIGN_OUT\n        });\n        history.push('/');\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n};\nexport const chkToken = () => {\n  return async dispatch => {\n    try {\n      const res = await fetch('/home', {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (res.status === 400) {\n        await history.push('/login');\n        const error = new Error(\"User Not logged in\");\n        throw error;\n      }\n\n      const data = await res.json();\n      dispatch({\n        type: CHK_TKN,\n        payload: data._id\n      });\n    } catch (e) {\n      alert(e);\n      console.log(e);\n    }\n  };\n};\nexport const createStream = formValues => {\n  return async (dispatch, getState) => {\n    const {\n      userId\n    } = getState().pauth;\n    const response = await server.post('/streams/new', { ...formValues,\n      userId\n    });\n    dispatch({\n      type: CREATE_STREAM,\n      payload: response.data\n    });\n  };\n};\nexport const fetchStreams = () => {\n  return async dispatch => {\n    const response = await server.get('/streams');\n    console.log(response.data);\n    dispatch({\n      type: FETCH_STREAMS,\n      payload: response.data\n    });\n  };\n};\nexport const fetchStream = id => {\n  return async dispatch => {\n    const response = await server.get(`/streams/${id}`);\n    dispatch({\n      type: FETCH_STREAM,\n      payload: response.data\n    });\n  };\n};\nexport const editStream = (id, formValues) => {\n  return async dispatch => {\n    const response = await server.patch(`/streams/edit/${id}`, { ...formValues\n    });\n    dispatch({\n      type: EDIT_STREAM,\n      payload: response.data\n    });\n  };\n};\nexport const deleteStream = id => {\n  return async dispatch => {\n    await server.delete(`/streams/delete/${id}`);\n    dispatch({\n      type: DELETE_STREAM,\n      payload: id\n    });\n    history.push('/streams/list');\n  };\n};\nexport const sucSnack = status => {\n  return {\n    type: SUC_SNACK,\n    payload: status\n  };\n};","map":{"version":3,"sources":["D:/STREAMING_SITE/client/src/actions/index.js"],"names":["server","history","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","SUC_SNACK","SIGN_UP","PSIGN_IN","CHK_TKN","PSIGN_OUT","signIn","userId","type","payload","signOut","signUp","formValues","gender","name","username","email","password","dispatch","response","post","data","push","e","alert","error","psignIn","res","fetch","method","headers","body","JSON","stringify","status","json","_id","Error","psignOut","Accept","console","log","chkToken","createStream","getState","pauth","fetchStreams","get","fetchStream","id","editStream","patch","deleteStream","delete","sucSnack"],"mappings":"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","sourcesContent":["import server from '../api/server'\r\nimport history from '../history'\r\n\r\nimport {\r\n    SIGN_IN, \r\n    SIGN_OUT, \r\n    CREATE_STREAM,\r\n    FETCH_STREAMS,\r\n    FETCH_STREAM,\r\n    DELETE_STREAM,\r\n    EDIT_STREAM,\r\n    SUC_SNACK,\r\n    SIGN_UP,\r\n    PSIGN_IN,CHK_TKN, PSIGN_OUT\r\n} from './types'\r\n\r\nexport const signIn = (userId) =>{\r\n    return{\r\n        type: SIGN_IN,\r\n        payload:userId\r\n    }\r\n}\r\n\r\nexport const signOut = () =>{\r\n    return{\r\n        type: SIGN_OUT\r\n    }\r\n}\r\nexport const signUp=(formValues,gender)=>{\r\n    const{name, username,email,password}=formValues\r\n    return async(dispatch)=>{\r\n        try{\r\n            const response = await server.post('/register',{name, username,email,password,gender})\r\n            dispatch({type: SIGN_UP, payload:response.data.userId})\r\n            history.push('/login')\r\n        }\r\n        catch(e){\r\n            alert(e.response.data.error)\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const psignIn = (formValues)=>{\r\n    const{username, password}=formValues\r\n    return async(dispatch)=>{\r\n        try{\r\n            const res = await fetch('/login',{\r\n                method:\"POST\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    username,\r\n                    password\r\n                })\r\n            })\r\n            if(res.status !== 400){\r\n                const data= await res.json()\r\n                dispatch({type:PSIGN_IN, payload:data._id})\r\n                history.push('/home')\r\n            }\r\n            else{\r\n                const error = new Error(\"Invalid Credentials\")\r\n                throw error\r\n            }\r\n        }\r\n        catch(e){\r\n            alert(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const psignOut = ()=>{\r\n    return async(dispatch)=>{\r\n        try{\r\n            const res = await fetch('https://streamshow-backend.herokuapp.com/logout',{\r\n                method:\"GET\",\r\n                headers:{\r\n                    Accept: \"application/json\",\r\n                    \"Content-Type\":\"application/json\"\r\n                },\r\n            })\r\n            if(res.status === 200){\r\n                dispatch({type:PSIGN_OUT})\r\n                history.push('/')\r\n            }\r\n        }\r\n        catch(e){\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const chkToken=()=>{\r\n    return async(dispatch)=>{\r\n        try{\r\n            const res = await fetch('/home',{\r\n                method:\"GET\",\r\n                headers:{\r\n                    Accept: \"application/json\",\r\n                    \"Content-Type\":\"application/json\"\r\n                },\r\n\r\n            })\r\n            if(res.status === 400){\r\n                await history.push('/login')\r\n                const error = new Error(\"User Not logged in\")\r\n                throw error\r\n            }\r\n            const data = await res.json()\r\n            dispatch({type:CHK_TKN, payload:data._id})\r\n        }\r\n        catch(e){\r\n            alert(e)\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const createStream = (formValues) =>{\r\n    return async (dispatch, getState) =>{\r\n        const {userId} = getState().pauth\r\n        const response = await server.post('/streams/new',{...formValues, userId})\r\n        dispatch({type: CREATE_STREAM, payload: response.data})\r\n    }\r\n}\r\n\r\nexport const fetchStreams = () =>{\r\n    return async (dispatch) =>{\r\n        const response = await server.get('/streams')\r\n        console.log(response.data)\r\n        dispatch({type:FETCH_STREAMS, payload: response.data})\r\n    }\r\n}\r\n\r\nexport const fetchStream = (id) =>{\r\n    return async(dispatch) =>{\r\n        const response = await server.get(`/streams/${id}`)\r\n        dispatch({type: FETCH_STREAM, payload: response.data})\r\n    }\r\n}\r\n\r\nexport const editStream = (id, formValues) =>{\r\n    return async(dispatch)=>{\r\n        const response = await server.patch(`/streams/edit/${id}`, {...formValues})\r\n        dispatch({type:EDIT_STREAM, payload:response.data})\r\n    }\r\n}\r\n\r\nexport const deleteStream = (id)=>{\r\n    return async(dispatch)=>{\r\n        await server.delete(`/streams/delete/${id}`)\r\n        dispatch({type: DELETE_STREAM, payload: id})\r\n        history.push('/streams/list')\r\n    }\r\n}\r\n\r\n\r\nexport const sucSnack = (status) =>{\r\n    return{\r\n        type: SUC_SNACK,\r\n        payload: status\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}