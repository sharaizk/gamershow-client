{"ast":null,"code":"import streams from '../api/streams';\nimport server from '../api/server';\nimport history from '../history';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM, SUC_SNACK, SIGN_UP, PSIGN_IN, CHK_TKN } from './types';\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const signUp = (formValues, gender) => {\n  const {\n    name,\n    username,\n    email,\n    password\n  } = formValues;\n  return async dispatch => {\n    try {\n      const response = await server.post('/register', {\n        name,\n        username,\n        email,\n        password,\n        gender\n      });\n      dispatch({\n        type: SIGN_UP,\n        payload: response.data.userId\n      });\n      history.push('/login');\n    } catch (e) {\n      alert(e.response.data.error);\n    }\n  };\n};\nexport const psignIn = formValues => {\n  const {\n    username,\n    password\n  } = formValues; // return async(dispatch)=>{\n  //     try{\n  //         const response = await server.post('/login',{username,password})\n  //         dispatch({type: PSIGN_IN, payload:response.data._id})\n  //         // history.push('/')\n  //     }\n  //     catch(e){\n  //         alert(e.response.data.error)\n  //     }\n  // }\n\n  return async dispatch => {\n    const res = await fetch('/login', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const data = await res.json();\n    dispatch({\n      type: PSIGN_IN,\n      payload: data._id\n    });\n    history.push('/home');\n  };\n};\nexport const createStream = formValues => {\n  return async (dispatch, getState) => {\n    const {\n      userId\n    } = getState().pauth;\n    const response = await server.post('/streams/new', { ...formValues,\n      userId\n    });\n    console.log(response);\n    dispatch({\n      type: CREATE_STREAM,\n      payload: response.data\n    });\n  };\n};\nexport const fetchStreams = () => {\n  return async dispatch => {\n    const response = await streams.get('/streams');\n    dispatch({\n      type: FETCH_STREAMS,\n      payload: response.data\n    });\n  };\n};\nexport const fetchStream = id => {\n  return async dispatch => {\n    const response = await streams.get(`/streams/${id}`);\n    dispatch({\n      type: FETCH_STREAM,\n      payload: response.data\n    });\n  };\n};\nexport const editStream = (id, formValues) => {\n  return async dispatch => {\n    const response = await streams.patch(`/streams/${id}`, formValues);\n    dispatch({\n      type: EDIT_STREAM,\n      payload: response.data\n    });\n  };\n};\nexport const deleteStream = id => {\n  return async dispatch => {\n    await streams.delete(`/streams/${id}`);\n    dispatch({\n      type: DELETE_STREAM,\n      payload: id\n    });\n    history.push('/');\n  };\n};\nexport const chkToken = () => {\n  return async dispatch => {\n    try {\n      const res = await fetch('/home', {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"include\"\n      });\n\n      if (res.status === 400) {\n        const error = new Error(\"User Not logged in\");\n        throw error;\n      }\n\n      const data = await res.json();\n      console.log(data);\n      dispatch({\n        type: CHK_TKN,\n        payload: data._id\n      });\n    } catch (e) {\n      alert(e);\n    }\n  };\n};\nexport const sucSnack = status => {\n  return {\n    type: SUC_SNACK,\n    payload: status\n  };\n};","map":{"version":3,"sources":["D:/STREAMING_SITE/client/src/actions/index.js"],"names":["streams","server","history","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","SUC_SNACK","SIGN_UP","PSIGN_IN","CHK_TKN","signIn","userId","type","payload","signOut","signUp","formValues","gender","name","username","email","password","dispatch","response","post","data","push","e","alert","error","psignIn","res","fetch","method","headers","body","JSON","stringify","json","_id","createStream","getState","pauth","console","log","fetchStreams","get","fetchStream","id","editStream","patch","deleteStream","delete","chkToken","Accept","credentials","status","Error","sucSnack"],"mappings":"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","sourcesContent":["import streams from '../api/streams'\r\nimport server from '../api/server'\r\nimport history from '../history'\r\n\r\nimport {\r\n    SIGN_IN, \r\n    SIGN_OUT, \r\n    CREATE_STREAM,\r\n    FETCH_STREAMS,\r\n    FETCH_STREAM,\r\n    DELETE_STREAM,\r\n    EDIT_STREAM,\r\n    SUC_SNACK,\r\n    SIGN_UP,\r\n    PSIGN_IN,CHK_TKN\r\n} from './types'\r\n\r\nexport const signIn = (userId) =>{\r\n    return{\r\n        type: SIGN_IN,\r\n        payload:userId\r\n    }\r\n}\r\n\r\nexport const signOut = () =>{\r\n    return{\r\n        type: SIGN_OUT\r\n    }\r\n}\r\nexport const signUp=(formValues,gender)=>{\r\n    const{name, username,email,password}=formValues\r\n    return async(dispatch)=>{\r\n        try{\r\n            const response = await server.post('/register',{name, username,email,password,gender})\r\n            dispatch({type: SIGN_UP, payload:response.data.userId})\r\n            history.push('/login')\r\n        }\r\n        catch(e){\r\n            alert(e.response.data.error)\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const psignIn = (formValues)=>{\r\n    const{username, password}=formValues\r\n    // return async(dispatch)=>{\r\n    //     try{\r\n    //         const response = await server.post('/login',{username,password})\r\n    //         dispatch({type: PSIGN_IN, payload:response.data._id})\r\n    //         // history.push('/')\r\n    //     }\r\n    //     catch(e){\r\n    //         alert(e.response.data.error)\r\n    //     }\r\n    // }\r\n    return async(dispatch)=>{\r\n        const res = await fetch('/login',{\r\n            method:\"POST\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                username,\r\n                password\r\n            })\r\n        })\r\n        const data= await res.json()\r\n        dispatch({type:PSIGN_IN, payload:data._id})\r\n        history.push('/home')\r\n    }\r\n}\r\n\r\nexport const createStream = (formValues) =>{\r\n    return async (dispatch, getState) =>{\r\n        const {userId} = getState().pauth\r\n        const response = await server.post('/streams/new',{...formValues, userId})\r\n        console.log(response)\r\n        dispatch({type: CREATE_STREAM, payload: response.data})\r\n    }\r\n}\r\n\r\nexport const fetchStreams = () =>{\r\n    return async (dispatch) =>{\r\n        const response = await streams.get('/streams')\r\n        dispatch({type:FETCH_STREAMS, payload: response.data})\r\n    }\r\n}\r\n\r\nexport const fetchStream = (id) =>{\r\n    return async(dispatch) =>{\r\n        const response = await streams.get(`/streams/${id}`)\r\n        dispatch({type: FETCH_STREAM, payload: response.data})\r\n    }\r\n}\r\n\r\nexport const editStream = (id, formValues) =>{\r\n    return async(dispatch)=>{\r\n        const response = await streams.patch(`/streams/${id}`, formValues)\r\n        dispatch({type:EDIT_STREAM, payload:response.data})\r\n    }\r\n}\r\n\r\nexport const deleteStream = (id)=>{\r\n    return async(dispatch)=>{\r\n        await streams.delete(`/streams/${id}`)\r\n        dispatch({type: DELETE_STREAM, payload: id})\r\n        history.push('/')\r\n    }\r\n}\r\n\r\nexport const chkToken=()=>{\r\n    return async(dispatch)=>{\r\n        try{\r\n            const res = await fetch('/home',{\r\n                method:\"GET\",\r\n                headers:{\r\n                    Accept: \"application/json\",\r\n                    \"Content-Type\":\"application/json\"\r\n                },\r\n                credentials:\"include\"\r\n            })\r\n            if(res.status === 400){\r\n                const error = new Error(\"User Not logged in\")\r\n                throw error\r\n            }\r\n            const data = await res.json()\r\n            console.log(data)\r\n            dispatch({type:CHK_TKN, payload:data._id})\r\n        }\r\n        catch(e){\r\n            alert(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const sucSnack = (status) =>{\r\n    return{\r\n        type: SUC_SNACK,\r\n        payload: status\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}