{"ast":null,"code":"import _classCallCheck from \"D:/STREAMING_SITE/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/STREAMING_SITE/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is derived from dailymotion's hls.js library (hls.js/src/remux/mp4-generator.js)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//  MP4 boxes generator for ISO BMFF (ISO Base Media File Format, defined in ISO/IEC 14496-12)\nvar MP4 = /*#__PURE__*/function () {\n  function MP4() {\n    _classCallCheck(this, MP4);\n  }\n\n  _createClass(MP4, null, [{\n    key: \"init\",\n    value: function init() {\n      MP4.types = {\n        avc1: [],\n        avcC: [],\n        btrt: [],\n        dinf: [],\n        dref: [],\n        esds: [],\n        ftyp: [],\n        hdlr: [],\n        mdat: [],\n        mdhd: [],\n        mdia: [],\n        mfhd: [],\n        minf: [],\n        moof: [],\n        moov: [],\n        mp4a: [],\n        mvex: [],\n        mvhd: [],\n        sdtp: [],\n        stbl: [],\n        stco: [],\n        stsc: [],\n        stsd: [],\n        stsz: [],\n        stts: [],\n        tfdt: [],\n        tfhd: [],\n        traf: [],\n        trak: [],\n        trun: [],\n        trex: [],\n        tkhd: [],\n        vmhd: [],\n        smhd: [],\n        '.mp3': []\n      };\n\n      for (var name in MP4.types) {\n        if (MP4.types.hasOwnProperty(name)) {\n          MP4.types[name] = [name.charCodeAt(0), name.charCodeAt(1), name.charCodeAt(2), name.charCodeAt(3)];\n        }\n      }\n\n      var constants = MP4.constants = {};\n      constants.FTYP = new Uint8Array([0x69, 0x73, 0x6F, 0x6D, // major_brand: isom\n      0x0, 0x0, 0x0, 0x1, // minor_version: 0x01\n      0x69, 0x73, 0x6F, 0x6D, // isom\n      0x61, 0x76, 0x63, 0x31 // avc1\n      ]);\n      constants.STSD_PREFIX = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n      0x00, 0x00, 0x00, 0x01 // entry_count\n      ]);\n      constants.STTS = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n      0x00, 0x00, 0x00, 0x00 // entry_count\n      ]);\n      constants.STSC = constants.STCO = constants.STTS;\n      constants.STSZ = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n      0x00, 0x00, 0x00, 0x00, // sample_size\n      0x00, 0x00, 0x00, 0x00 // sample_count\n      ]);\n      constants.HDLR_VIDEO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n      0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x69, 0x64, 0x65, 0x6F, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: VideoHandler\n      ]);\n      constants.HDLR_AUDIO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x73, 0x6F, 0x75, 0x6E, // handler_type: 'soun'\n      0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x6F, 0x75, 0x6E, 0x64, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: SoundHandler\n      ]);\n      constants.DREF = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n      0x00, 0x00, 0x00, 0x01, // entry_count\n      0x00, 0x00, 0x00, 0x0C, // entry_size\n      0x75, 0x72, 0x6C, 0x20, // type 'url '\n      0x00, 0x00, 0x00, 0x01 // version(0) + flags\n      ]); // Sound media header\n\n      constants.SMHD = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n      0x00, 0x00, 0x00, 0x00 // balance(2) + reserved(2)\n      ]); // video media header\n\n      constants.VMHD = new Uint8Array([0x00, 0x00, 0x00, 0x01, // version(0) + flags\n      0x00, 0x00, // graphicsmode: 2 bytes\n      0x00, 0x00, 0x00, 0x00, // opcolor: 3 * 2 bytes\n      0x00, 0x00]);\n    } // Generate a box\n\n  }, {\n    key: \"box\",\n    value: function box(type) {\n      var size = 8;\n      var result = null;\n      var datas = Array.prototype.slice.call(arguments, 1);\n      var arrayCount = datas.length;\n\n      for (var i = 0; i < arrayCount; i++) {\n        size += datas[i].byteLength;\n      }\n\n      result = new Uint8Array(size);\n      result[0] = size >>> 24 & 0xFF; // size\n\n      result[1] = size >>> 16 & 0xFF;\n      result[2] = size >>> 8 & 0xFF;\n      result[3] = size & 0xFF;\n      result.set(type, 4); // type\n\n      var offset = 8;\n\n      for (var _i = 0; _i < arrayCount; _i++) {\n        // data body\n        result.set(datas[_i], offset);\n        offset += datas[_i].byteLength;\n      }\n\n      return result;\n    } // emit ftyp & moov\n\n  }, {\n    key: \"generateInitSegment\",\n    value: function generateInitSegment(meta) {\n      var ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);\n      var moov = MP4.moov(meta);\n      var result = new Uint8Array(ftyp.byteLength + moov.byteLength);\n      result.set(ftyp, 0);\n      result.set(moov, ftyp.byteLength);\n      return result;\n    } // Movie metadata box\n\n  }, {\n    key: \"moov\",\n    value: function moov(meta) {\n      var mvhd = MP4.mvhd(meta.timescale, meta.duration);\n      var trak = MP4.trak(meta);\n      var mvex = MP4.mvex(meta);\n      return MP4.box(MP4.types.moov, mvhd, trak, mvex);\n    } // Movie header box\n\n  }, {\n    key: \"mvhd\",\n    value: function mvhd(timescale, duration) {\n      return MP4.box(MP4.types.mvhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n      0x00, 0x00, 0x00, 0x00, // creation_time\n      0x00, 0x00, 0x00, 0x00, // modification_time\n      timescale >>> 24 & 0xFF, // timescale: 4 bytes\n      timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes\n      duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x01, 0x00, 0x00, // Preferred rate: 1.0\n      0x01, 0x00, 0x00, 0x00, // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\n      0x00, 0x00, 0x00, 0x00, // reserved: 4 + 4 bytes\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n      0x00, 0x00, 0x00, 0x00, // ----begin pre_defined 6 * 4 bytes----\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ----end pre_defined 6 * 4 bytes----\n      0xFF, 0xFF, 0xFF, 0xFF // next_track_ID\n      ]));\n    } // Track box\n\n  }, {\n    key: \"trak\",\n    value: function trak(meta) {\n      return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\n    } // Track header box\n\n  }, {\n    key: \"tkhd\",\n    value: function tkhd(meta) {\n      var trackId = meta.id,\n          duration = meta.duration;\n      var width = meta.presentWidth,\n          height = meta.presentHeight;\n      return MP4.box(MP4.types.tkhd, new Uint8Array([0x00, 0x00, 0x00, 0x07, // version(0) + flags\n      0x00, 0x00, 0x00, 0x00, // creation_time\n      0x00, 0x00, 0x00, 0x00, // modification_time\n      trackId >>> 24 & 0xFF, // track_ID: 4 bytes\n      trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes\n      duration >>> 24 & 0xFF, // duration: 4 bytes\n      duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // layer(2bytes) + alternate_group(2bytes)\n      0x00, 0x00, 0x00, 0x00, // volume(2bytes) + reserved(2bytes)\n      0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----\n      width >>> 8 & 0xFF, // width and height\n      width & 0xFF, 0x00, 0x00, height >>> 8 & 0xFF, height & 0xFF, 0x00, 0x00]));\n    } // Media Box\n\n  }, {\n    key: \"mdia\",\n    value: function mdia(meta) {\n      return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));\n    } // Media header box\n\n  }, {\n    key: \"mdhd\",\n    value: function mdhd(meta) {\n      var timescale = meta.timescale;\n      var duration = meta.duration;\n      return MP4.box(MP4.types.mdhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n      0x00, 0x00, 0x00, 0x00, // creation_time\n      0x00, 0x00, 0x00, 0x00, // modification_time\n      timescale >>> 24 & 0xFF, // timescale: 4 bytes\n      timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes\n      duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x55, 0xC4, // language: und (undetermined)\n      0x00, 0x00 // pre_defined = 0\n      ]));\n    } // Media handler reference box\n\n  }, {\n    key: \"hdlr\",\n    value: function hdlr(meta) {\n      var data = null;\n\n      if (meta.type === 'audio') {\n        data = MP4.constants.HDLR_AUDIO;\n      } else {\n        data = MP4.constants.HDLR_VIDEO;\n      }\n\n      return MP4.box(MP4.types.hdlr, data);\n    } // Media infomation box\n\n  }, {\n    key: \"minf\",\n    value: function minf(meta) {\n      var xmhd = null;\n\n      if (meta.type === 'audio') {\n        xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);\n      } else {\n        xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);\n      }\n\n      return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\n    } // Data infomation box\n\n  }, {\n    key: \"dinf\",\n    value: function dinf() {\n      var result = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, MP4.constants.DREF));\n      return result;\n    } // Sample table box\n\n  }, {\n    key: \"stbl\",\n    value: function stbl(meta) {\n      var result = MP4.box(MP4.types.stbl, // type: stbl\n      MP4.stsd(meta), // Sample Description Table\n      MP4.box(MP4.types.stts, MP4.constants.STTS), // Time-To-Sample\n      MP4.box(MP4.types.stsc, MP4.constants.STSC), // Sample-To-Chunk\n      MP4.box(MP4.types.stsz, MP4.constants.STSZ), // Sample size\n      MP4.box(MP4.types.stco, MP4.constants.STCO) // Chunk offset\n      );\n      return result;\n    } // Sample description box\n\n  }, {\n    key: \"stsd\",\n    value: function stsd(meta) {\n      if (meta.type === 'audio') {\n        if (meta.codec === 'mp3') {\n          return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp3(meta));\n        } // else: aac -> mp4a\n\n\n        return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));\n      } else {\n        return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));\n      }\n    }\n  }, {\n    key: \"mp3\",\n    value: function mp3(meta) {\n      var channelCount = meta.channelCount;\n      var sampleRate = meta.audioSampleRate;\n      var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n      0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n      0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n      0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2)\n      0x00, 0x10, // sampleSize(2)\n      0x00, 0x00, 0x00, 0x00, // reserved(4)\n      sampleRate >>> 8 & 0xFF, // Audio sample rate\n      sampleRate & 0xFF, 0x00, 0x00]);\n      return MP4.box(MP4.types['.mp3'], data);\n    }\n  }, {\n    key: \"mp4a\",\n    value: function mp4a(meta) {\n      var channelCount = meta.channelCount;\n      var sampleRate = meta.audioSampleRate;\n      var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n      0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n      0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes\n      0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2)\n      0x00, 0x10, // sampleSize(2)\n      0x00, 0x00, 0x00, 0x00, // reserved(4)\n      sampleRate >>> 8 & 0xFF, // Audio sample rate\n      sampleRate & 0xFF, 0x00, 0x00]);\n      return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\n    }\n  }, {\n    key: \"esds\",\n    value: function esds(meta) {\n      var config = meta.config || [];\n      var configSize = config.length;\n      var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version 0 + flags\n      0x03, // descriptor_type\n      0x17 + configSize, // length3\n      0x00, 0x01, // es_id\n      0x00, // stream_priority\n      0x04, // descriptor_type\n      0x0F + configSize, // length\n      0x40, // codec: mpeg4_audio\n      0x15, // stream_type: Audio\n      0x00, 0x00, 0x00, // buffer_size\n      0x00, 0x00, 0x00, 0x00, // maxBitrate\n      0x00, 0x00, 0x00, 0x00, // avgBitrate\n      0x05 // descriptor_type\n      ].concat([configSize]).concat(config).concat([0x06, 0x01, 0x02 // GASpecificConfig\n      ]));\n      return MP4.box(MP4.types.esds, data);\n    }\n  }, {\n    key: \"avc1\",\n    value: function avc1(meta) {\n      var avcc = meta.avcc;\n      var width = meta.codecWidth,\n          height = meta.codecHeight;\n      var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)\n      0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)\n      0x00, 0x00, 0x00, 0x00, // pre_defined(2) + reserved(2)\n      0x00, 0x00, 0x00, 0x00, // pre_defined: 3 * 4 bytes\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, width >>> 8 & 0xFF, // width: 2 bytes\n      width & 0xFF, height >>> 8 & 0xFF, // height: 2 bytes\n      height & 0xFF, 0x00, 0x48, 0x00, 0x00, // horizresolution: 4 bytes\n      0x00, 0x48, 0x00, 0x00, // vertresolution: 4 bytes\n      0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes\n      0x00, 0x01, // frame_count\n      0x0A, // strlen\n      0x78, 0x71, 0x71, 0x2F, // compressorname: 32 bytes\n      0x66, 0x6C, 0x76, 0x2E, 0x6A, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, // depth\n      0xFF, 0xFF // pre_defined = -1\n      ]);\n      return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));\n    } // Movie Extends box\n\n  }, {\n    key: \"mvex\",\n    value: function mvex(meta) {\n      return MP4.box(MP4.types.mvex, MP4.trex(meta));\n    } // Track Extends box\n\n  }, {\n    key: \"trex\",\n    value: function trex(meta) {\n      var trackId = meta.id;\n      var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags\n      trackId >>> 24 & 0xFF, // track_ID\n      trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n      0x00, 0x00, 0x00, 0x00, // default_sample_duration\n      0x00, 0x00, 0x00, 0x00, // default_sample_size\n      0x00, 0x01, 0x00, 0x01 // default_sample_flags\n      ]);\n      return MP4.box(MP4.types.trex, data);\n    } // Movie fragment box\n\n  }, {\n    key: \"moof\",\n    value: function moof(track, baseMediaDecodeTime) {\n      return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));\n    }\n  }, {\n    key: \"mfhd\",\n    value: function mfhd(sequenceNumber) {\n      var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, sequenceNumber >>> 24 & 0xFF, // sequence_number: int32\n      sequenceNumber >>> 16 & 0xFF, sequenceNumber >>> 8 & 0xFF, sequenceNumber & 0xFF]);\n      return MP4.box(MP4.types.mfhd, data);\n    } // Track fragment box\n\n  }, {\n    key: \"traf\",\n    value: function traf(track, baseMediaDecodeTime) {\n      var trackId = track.id; // Track fragment header box\n\n      var tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags\n      trackId >>> 24 & 0xFF, // track_ID\n      trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF])); // Track Fragment Decode Time\n\n      var tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags\n      baseMediaDecodeTime >>> 24 & 0xFF, // baseMediaDecodeTime: int32\n      baseMediaDecodeTime >>> 16 & 0xFF, baseMediaDecodeTime >>> 8 & 0xFF, baseMediaDecodeTime & 0xFF]));\n      var sdtp = MP4.sdtp(track);\n      var trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\n      return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\n    } // Sample Dependency Type box\n\n  }, {\n    key: \"sdtp\",\n    value: function sdtp(track) {\n      var samples = track.samples || [];\n      var sampleCount = samples.length;\n      var data = new Uint8Array(4 + sampleCount); // 0~4 bytes: version(0) & flags\n\n      for (var i = 0; i < sampleCount; i++) {\n        var flags = samples[i].flags;\n        data[i + 4] = flags.isLeading << 6 | // is_leading: 2 (bit)\n        flags.dependsOn << 4 // sample_depends_on\n        | flags.isDependedOn << 2 // sample_is_depended_on\n        | flags.hasRedundancy; // sample_has_redundancy\n      }\n\n      return MP4.box(MP4.types.sdtp, data);\n    } // Track fragment run box\n\n  }, {\n    key: \"trun\",\n    value: function trun(track, offset) {\n      var samples = track.samples || [];\n      var sampleCount = samples.length;\n      var dataSize = 12 + 16 * sampleCount;\n      var data = new Uint8Array(dataSize);\n      offset += 8 + dataSize;\n      data.set([0x00, 0x00, 0x0F, 0x01, // version(0) & flags\n      sampleCount >>> 24 & 0xFF, // sample_count\n      sampleCount >>> 16 & 0xFF, sampleCount >>> 8 & 0xFF, sampleCount & 0xFF, offset >>> 24 & 0xFF, // data_offset\n      offset >>> 16 & 0xFF, offset >>> 8 & 0xFF, offset & 0xFF], 0);\n\n      for (var i = 0; i < sampleCount; i++) {\n        var duration = samples[i].duration;\n        var size = samples[i].size;\n        var flags = samples[i].flags;\n        var cts = samples[i].cts;\n        data.set([duration >>> 24 & 0xFF, // sample_duration\n        duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, size >>> 24 & 0xFF, // sample_size\n        size >>> 16 & 0xFF, size >>> 8 & 0xFF, size & 0xFF, flags.isLeading << 2 | flags.dependsOn, // sample_flags\n        flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.isNonSync, 0x00, 0x00, // sample_degradation_priority\n        cts >>> 24 & 0xFF, // sample_composition_time_offset\n        cts >>> 16 & 0xFF, cts >>> 8 & 0xFF, cts & 0xFF], 12 + 16 * i);\n      }\n\n      return MP4.box(MP4.types.trun, data);\n    }\n  }, {\n    key: \"mdat\",\n    value: function mdat(data) {\n      return MP4.box(MP4.types.mdat, data);\n    }\n  }]);\n\n  return MP4;\n}();\n\nMP4.init();\nexport default MP4;","map":{"version":3,"sources":["D:/STREAMING_SITE/client/node_modules/flv.js/src/remux/mp4-generator.js"],"names":["MP4","types","avc1","avcC","btrt","dinf","dref","esds","ftyp","hdlr","mdat","mdhd","mdia","mfhd","minf","moof","moov","mp4a","mvex","mvhd","sdtp","stbl","stco","stsc","stsd","stsz","stts","tfdt","tfhd","traf","trak","trun","trex","tkhd","vmhd","smhd","name","hasOwnProperty","charCodeAt","constants","FTYP","Uint8Array","STSD_PREFIX","STTS","STSC","STCO","STSZ","HDLR_VIDEO","HDLR_AUDIO","DREF","SMHD","VMHD","type","size","result","datas","Array","prototype","slice","call","arguments","arrayCount","length","i","byteLength","set","offset","meta","box","timescale","duration","trackId","id","width","presentWidth","height","presentHeight","data","xmhd","codec","mp3","channelCount","sampleRate","audioSampleRate","config","configSize","concat","avcc","codecWidth","codecHeight","track","baseMediaDecodeTime","sequenceNumber","samples","sampleCount","flags","isLeading","dependsOn","isDependedOn","hasRedundancy","dataSize","cts","isNonSync","init"],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is derived from dailymotion's hls.js library (hls.js/src/remux/mp4-generator.js)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//  MP4 boxes generator for ISO BMFF (ISO Base Media File Format, defined in ISO/IEC 14496-12)\nclass MP4 {\n\n    static init() {\n        MP4.types = {\n            avc1: [], avcC: [], btrt: [], dinf: [],\n            dref: [], esds: [], ftyp: [], hdlr: [],\n            mdat: [], mdhd: [], mdia: [], mfhd: [],\n            minf: [], moof: [], moov: [], mp4a: [],\n            mvex: [], mvhd: [], sdtp: [], stbl: [],\n            stco: [], stsc: [], stsd: [], stsz: [],\n            stts: [], tfdt: [], tfhd: [], traf: [],\n            trak: [], trun: [], trex: [], tkhd: [],\n            vmhd: [], smhd: [], '.mp3': []\n        };\n\n        for (let name in MP4.types) {\n            if (MP4.types.hasOwnProperty(name)) {\n                MP4.types[name] = [\n                    name.charCodeAt(0),\n                    name.charCodeAt(1),\n                    name.charCodeAt(2),\n                    name.charCodeAt(3)\n                ];\n            }\n        }\n\n        let constants = MP4.constants = {};\n\n        constants.FTYP = new Uint8Array([\n            0x69, 0x73, 0x6F, 0x6D,  // major_brand: isom\n            0x0,  0x0,  0x0,  0x1,   // minor_version: 0x01\n            0x69, 0x73, 0x6F, 0x6D,  // isom\n            0x61, 0x76, 0x63, 0x31   // avc1\n        ]);\n\n        constants.STSD_PREFIX = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x01   // entry_count\n        ]);\n\n        constants.STTS = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00   // entry_count\n        ]);\n\n        constants.STSC = constants.STCO = constants.STTS;\n\n        constants.STSZ = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // sample_size\n            0x00, 0x00, 0x00, 0x00   // sample_count\n        ]);\n\n        constants.HDLR_VIDEO = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // pre_defined\n            0x76, 0x69, 0x64, 0x65,  // handler_type: 'vide'\n            0x00, 0x00, 0x00, 0x00,  // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x56, 0x69, 0x64, 0x65,\n            0x6F, 0x48, 0x61, 0x6E,\n            0x64, 0x6C, 0x65, 0x72, 0x00  // name: VideoHandler\n        ]);\n\n        constants.HDLR_AUDIO = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // pre_defined\n            0x73, 0x6F, 0x75, 0x6E,  // handler_type: 'soun'\n            0x00, 0x00, 0x00, 0x00,  // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x53, 0x6F, 0x75, 0x6E,\n            0x64, 0x48, 0x61, 0x6E,\n            0x64, 0x6C, 0x65, 0x72, 0x00  // name: SoundHandler\n        ]);\n\n        constants.DREF = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x01,  // entry_count\n            0x00, 0x00, 0x00, 0x0C,  // entry_size\n            0x75, 0x72, 0x6C, 0x20,  // type 'url '\n            0x00, 0x00, 0x00, 0x01   // version(0) + flags\n        ]);\n\n        // Sound media header\n        constants.SMHD = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00   // balance(2) + reserved(2)\n        ]);\n\n        // video media header\n        constants.VMHD = new Uint8Array([\n            0x00, 0x00, 0x00, 0x01,  // version(0) + flags\n            0x00, 0x00,              // graphicsmode: 2 bytes\n            0x00, 0x00, 0x00, 0x00,  // opcolor: 3 * 2 bytes\n            0x00, 0x00\n        ]);\n    }\n\n    // Generate a box\n    static box(type) {\n        let size = 8;\n        let result = null;\n        let datas = Array.prototype.slice.call(arguments, 1);\n        let arrayCount = datas.length;\n\n        for (let i = 0; i < arrayCount; i++) {\n            size += datas[i].byteLength;\n        }\n\n        result = new Uint8Array(size);\n        result[0] = (size >>> 24) & 0xFF;  // size\n        result[1] = (size >>> 16) & 0xFF;\n        result[2] = (size >>>  8) & 0xFF;\n        result[3] = (size) & 0xFF;\n\n        result.set(type, 4);  // type\n\n        let offset = 8;\n        for (let i = 0; i < arrayCount; i++) {  // data body\n            result.set(datas[i], offset);\n            offset += datas[i].byteLength;\n        }\n\n        return result;\n    }\n\n    // emit ftyp & moov\n    static generateInitSegment(meta) {\n        let ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);\n        let moov = MP4.moov(meta);\n\n        let result = new Uint8Array(ftyp.byteLength + moov.byteLength);\n        result.set(ftyp, 0);\n        result.set(moov, ftyp.byteLength);\n        return result;\n    }\n\n    // Movie metadata box\n    static moov(meta) {\n        let mvhd = MP4.mvhd(meta.timescale, meta.duration);\n        let trak = MP4.trak(meta);\n        let mvex = MP4.mvex(meta);\n        return MP4.box(MP4.types.moov, mvhd, trak, mvex);\n    }\n\n    // Movie header box\n    static mvhd(timescale, duration) {\n        return MP4.box(MP4.types.mvhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (timescale >>> 24) & 0xFF,  // timescale: 4 bytes\n            (timescale >>> 16) & 0xFF,\n            (timescale >>>  8) & 0xFF,\n            (timescale) & 0xFF,\n            (duration >>> 24) & 0xFF,   // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>>  8) & 0xFF,\n            (duration) & 0xFF,\n            0x00, 0x01, 0x00, 0x00,  // Preferred rate: 1.0\n            0x01, 0x00, 0x00, 0x00,  // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 + 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,  // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00,  // ----end composition matrix----\n            0x00, 0x00, 0x00, 0x00,  // ----begin pre_defined 6 * 4 bytes----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,  // ----end pre_defined 6 * 4 bytes----\n            0xFF, 0xFF, 0xFF, 0xFF   // next_track_ID\n        ]));\n    }\n\n    // Track box\n    static trak(meta) {\n        return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\n    }\n\n    // Track header box\n    static tkhd(meta) {\n        let trackId = meta.id, duration = meta.duration;\n        let width = meta.presentWidth, height = meta.presentHeight;\n\n        return MP4.box(MP4.types.tkhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x07,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (trackId >>> 24) & 0xFF,  // track_ID: 4 bytes\n            (trackId >>> 16) & 0xFF,\n            (trackId >>>  8) & 0xFF,\n            (trackId) & 0xFF,\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 bytes\n            (duration >>> 24) & 0xFF, // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>>  8) & 0xFF,\n            (duration) & 0xFF,\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,  // layer(2bytes) + alternate_group(2bytes)\n            0x00, 0x00, 0x00, 0x00,  // volume(2bytes) + reserved(2bytes)\n            0x00, 0x01, 0x00, 0x00,  // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00,  // ----end composition matrix----\n            (width >>> 8) & 0xFF,    // width and height\n            (width) & 0xFF,\n            0x00, 0x00,\n            (height >>> 8) & 0xFF,\n            (height) & 0xFF,\n            0x00, 0x00\n        ]));\n    }\n\n    // Media Box\n    static mdia(meta) {\n        return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));\n    }\n\n    // Media header box\n    static mdhd(meta) {\n        let timescale = meta.timescale;\n        let duration = meta.duration;\n        return MP4.box(MP4.types.mdhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (timescale >>> 24) & 0xFF,  // timescale: 4 bytes\n            (timescale >>> 16) & 0xFF,\n            (timescale >>>  8) & 0xFF,\n            (timescale) & 0xFF,\n            (duration >>> 24) & 0xFF,   // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>>  8) & 0xFF,\n            (duration) & 0xFF,\n            0x55, 0xC4,             // language: und (undetermined)\n            0x00, 0x00              // pre_defined = 0\n        ]));\n    }\n\n    // Media handler reference box\n    static hdlr(meta) {\n        let data = null;\n        if (meta.type === 'audio') {\n            data = MP4.constants.HDLR_AUDIO;\n        } else {\n            data = MP4.constants.HDLR_VIDEO;\n        }\n        return MP4.box(MP4.types.hdlr, data);\n    }\n\n    // Media infomation box\n    static minf(meta) {\n        let xmhd = null;\n        if (meta.type === 'audio') {\n            xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);\n        } else {\n            xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);\n        }\n        return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\n    }\n\n    // Data infomation box\n    static dinf() {\n        let result = MP4.box(MP4.types.dinf,\n            MP4.box(MP4.types.dref, MP4.constants.DREF)\n        );\n        return result;\n    }\n\n    // Sample table box\n    static stbl(meta) {\n        let result = MP4.box(MP4.types.stbl,  // type: stbl\n            MP4.stsd(meta),  // Sample Description Table\n            MP4.box(MP4.types.stts, MP4.constants.STTS),  // Time-To-Sample\n            MP4.box(MP4.types.stsc, MP4.constants.STSC),  // Sample-To-Chunk\n            MP4.box(MP4.types.stsz, MP4.constants.STSZ),  // Sample size\n            MP4.box(MP4.types.stco, MP4.constants.STCO)   // Chunk offset\n        ); \n        return result; \n    }\n\n    // Sample description box\n    static stsd(meta) {\n        if (meta.type === 'audio') {\n            if (meta.codec === 'mp3') {\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp3(meta));\n            }\n            // else: aac -> mp4a\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));\n        } else {\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));\n        }\n    }\n\n    static mp3(meta) {\n        let channelCount = meta.channelCount;\n        let sampleRate = meta.audioSampleRate;\n\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, channelCount,      // channelCount(2)\n            0x00, 0x10,              // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            (sampleRate >>> 8) & 0xFF,  // Audio sample rate\n            (sampleRate) & 0xFF,\n            0x00, 0x00\n        ]);\n\n        return MP4.box(MP4.types['.mp3'], data);\n    }\n\n    static mp4a(meta) {\n        let channelCount = meta.channelCount;\n        let sampleRate = meta.audioSampleRate;\n\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, channelCount,      // channelCount(2)\n            0x00, 0x10,              // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            (sampleRate >>> 8) & 0xFF,  // Audio sample rate\n            (sampleRate) & 0xFF,\n            0x00, 0x00\n        ]);\n\n        return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\n    }\n\n    static esds(meta) {\n        let config = meta.config || [];\n        let configSize = config.length;\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version 0 + flags\n\n            0x03,                    // descriptor_type\n            0x17 + configSize,       // length3\n            0x00, 0x01,              // es_id\n            0x00,                    // stream_priority\n\n            0x04,                    // descriptor_type\n            0x0F + configSize,       // length\n            0x40,                    // codec: mpeg4_audio\n            0x15,                    // stream_type: Audio\n            0x00, 0x00, 0x00,        // buffer_size\n            0x00, 0x00, 0x00, 0x00,  // maxBitrate\n            0x00, 0x00, 0x00, 0x00,  // avgBitrate\n\n            0x05                     // descriptor_type\n        ].concat([\n            configSize\n        ]).concat(\n            config\n        ).concat([\n            0x06, 0x01, 0x02         // GASpecificConfig\n        ]));\n        return MP4.box(MP4.types.esds, data);\n    }\n\n    static avc1(meta) {\n        let avcc = meta.avcc;\n        let width = meta.codecWidth, height = meta.codecHeight;\n\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00,  // pre_defined(2) + reserved(2)\n            0x00, 0x00, 0x00, 0x00,  // pre_defined: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            (width >>> 8) & 0xFF,    // width: 2 bytes\n            (width) & 0xFF,\n            (height >>> 8) & 0xFF,   // height: 2 bytes\n            (height) & 0xFF,\n            0x00, 0x48, 0x00, 0x00,  // horizresolution: 4 bytes\n            0x00, 0x48, 0x00, 0x00,  // vertresolution: 4 bytes\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 bytes\n            0x00, 0x01,              // frame_count\n            0x0A,                    // strlen\n            0x78, 0x71, 0x71, 0x2F,  // compressorname: 32 bytes\n            0x66, 0x6C, 0x76, 0x2E,\n            0x6A, 0x73, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00,\n            0x00, 0x18,              // depth\n            0xFF, 0xFF               // pre_defined = -1\n        ]);\n        return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));\n    }\n\n    // Movie Extends box\n    static mvex(meta) {\n        return MP4.box(MP4.types.mvex, MP4.trex(meta));\n    }\n\n    // Track Extends box\n    static trex(meta) {\n        let trackId = meta.id;\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            (trackId >>> 24) & 0xFF, // track_ID\n            (trackId >>> 16) & 0xFF,\n            (trackId >>>  8) & 0xFF,\n            (trackId) & 0xFF,\n            0x00, 0x00, 0x00, 0x01,  // default_sample_description_index\n            0x00, 0x00, 0x00, 0x00,  // default_sample_duration\n            0x00, 0x00, 0x00, 0x00,  // default_sample_size\n            0x00, 0x01, 0x00, 0x01   // default_sample_flags\n        ]);\n        return MP4.box(MP4.types.trex, data);\n    }\n\n    // Movie fragment box\n    static moof(track, baseMediaDecodeTime) {\n        return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));\n    }\n\n    static mfhd(sequenceNumber) {\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,\n            (sequenceNumber >>> 24) & 0xFF,  // sequence_number: int32\n            (sequenceNumber >>> 16) & 0xFF,\n            (sequenceNumber >>>  8) & 0xFF,\n            (sequenceNumber) & 0xFF\n        ]);\n        return MP4.box(MP4.types.mfhd, data);\n    }\n\n    // Track fragment box\n    static traf(track, baseMediaDecodeTime) {\n        let trackId = track.id;\n\n        // Track fragment header box\n        let tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) & flags\n            (trackId >>> 24) & 0xFF, // track_ID\n            (trackId >>> 16) & 0xFF,\n            (trackId >>>  8) & 0xFF,\n            (trackId) & 0xFF\n        ]));\n        // Track Fragment Decode Time\n        let tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) & flags\n            (baseMediaDecodeTime >>> 24) & 0xFF,  // baseMediaDecodeTime: int32\n            (baseMediaDecodeTime >>> 16) & 0xFF,\n            (baseMediaDecodeTime >>>  8) & 0xFF,\n            (baseMediaDecodeTime) & 0xFF\n        ]));\n        let sdtp = MP4.sdtp(track);\n        let trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\n\n        return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\n    }\n\n    // Sample Dependency Type box\n    static sdtp(track) {\n        let samples = track.samples || [];\n        let sampleCount = samples.length;\n        let data = new Uint8Array(4 + sampleCount);\n        // 0~4 bytes: version(0) & flags\n        for (let i = 0; i < sampleCount; i++) {\n            let flags = samples[i].flags;\n            data[i + 4] = (flags.isLeading << 6)    // is_leading: 2 (bit)\n                        | (flags.dependsOn << 4)    // sample_depends_on\n                        | (flags.isDependedOn << 2) // sample_is_depended_on\n                        | (flags.hasRedundancy);    // sample_has_redundancy\n        }\n        return MP4.box(MP4.types.sdtp, data);\n    }\n\n    // Track fragment run box\n    static trun(track, offset) {\n        let samples = track.samples || [];\n        let sampleCount = samples.length;\n        let dataSize = 12 + 16 * sampleCount;\n        let data = new Uint8Array(dataSize);\n        offset += 8 + dataSize;\n\n        data.set([\n            0x00, 0x00, 0x0F, 0x01,      // version(0) & flags\n            (sampleCount >>> 24) & 0xFF, // sample_count\n            (sampleCount >>> 16) & 0xFF,\n            (sampleCount >>>  8) & 0xFF,\n            (sampleCount) & 0xFF,\n            (offset >>> 24) & 0xFF,      // data_offset\n            (offset >>> 16) & 0xFF,\n            (offset >>>  8) & 0xFF,\n            (offset) & 0xFF\n        ], 0);\n\n        for (let i = 0; i < sampleCount; i++) {\n            let duration = samples[i].duration;\n            let size = samples[i].size;\n            let flags = samples[i].flags;\n            let cts = samples[i].cts;\n            data.set([\n                (duration >>> 24) & 0xFF,  // sample_duration\n                (duration >>> 16) & 0xFF,\n                (duration >>>  8) & 0xFF,\n                (duration) & 0xFF,\n                (size >>> 24) & 0xFF,      // sample_size\n                (size >>> 16) & 0xFF,\n                (size >>>  8) & 0xFF,\n                (size) & 0xFF,\n                (flags.isLeading << 2) | flags.dependsOn,  // sample_flags\n                (flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | flags.isNonSync,\n                0x00, 0x00,                // sample_degradation_priority\n                (cts >>> 24) & 0xFF,       // sample_composition_time_offset\n                (cts >>> 16) & 0xFF,\n                (cts >>>  8) & 0xFF,\n                (cts) & 0xFF\n            ], 12 + 16 * i);\n        }\n        return MP4.box(MP4.types.trun, data);\n    }\n\n    static mdat(data) {\n        return MP4.box(MP4.types.mdat, data);\n    }\n\n}\n\nMP4.init();\n\nexport default MP4;"]},"metadata":{},"sourceType":"module"}