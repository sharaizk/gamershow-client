{"ast":null,"code":"import _classCallCheck from \"D:/STREAMING_SITE/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/STREAMING_SITE/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { IllegalStateException, InvalidArgumentException } from '../utils/exception.js'; // Exponential-Golomb buffer decoder\n\nvar ExpGolomb = /*#__PURE__*/function () {\n  function ExpGolomb(uint8array) {\n    _classCallCheck(this, ExpGolomb);\n\n    this.TAG = 'ExpGolomb';\n    this._buffer = uint8array;\n    this._buffer_index = 0;\n    this._total_bytes = uint8array.byteLength;\n    this._total_bits = uint8array.byteLength * 8;\n    this._current_word = 0;\n    this._current_word_bits_left = 0;\n  }\n\n  _createClass(ExpGolomb, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this._buffer = null;\n    }\n  }, {\n    key: \"_fillCurrentWord\",\n    value: function _fillCurrentWord() {\n      var buffer_bytes_left = this._total_bytes - this._buffer_index;\n      if (buffer_bytes_left <= 0) throw new IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');\n      var bytes_read = Math.min(4, buffer_bytes_left);\n      var word = new Uint8Array(4);\n      word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\n      this._current_word = new DataView(word.buffer).getUint32(0, false);\n      this._buffer_index += bytes_read;\n      this._current_word_bits_left = bytes_read * 8;\n    }\n  }, {\n    key: \"readBits\",\n    value: function readBits(bits) {\n      if (bits > 32) throw new InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');\n\n      if (bits <= this._current_word_bits_left) {\n        var _result = this._current_word >>> 32 - bits;\n\n        this._current_word <<= bits;\n        this._current_word_bits_left -= bits;\n        return _result;\n      }\n\n      var result = this._current_word_bits_left ? this._current_word : 0;\n      result = result >>> 32 - this._current_word_bits_left;\n      var bits_need_left = bits - this._current_word_bits_left;\n\n      this._fillCurrentWord();\n\n      var bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\n      var result2 = this._current_word >>> 32 - bits_read_next;\n      this._current_word <<= bits_read_next;\n      this._current_word_bits_left -= bits_read_next;\n      result = result << bits_read_next | result2;\n      return result;\n    }\n  }, {\n    key: \"readBool\",\n    value: function readBool() {\n      return this.readBits(1) === 1;\n    }\n  }, {\n    key: \"readByte\",\n    value: function readByte() {\n      return this.readBits(8);\n    }\n  }, {\n    key: \"_skipLeadingZero\",\n    value: function _skipLeadingZero() {\n      var zero_count;\n\n      for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\n        if (0 !== (this._current_word & 0x80000000 >>> zero_count)) {\n          this._current_word <<= zero_count;\n          this._current_word_bits_left -= zero_count;\n          return zero_count;\n        }\n      }\n\n      this._fillCurrentWord();\n\n      return zero_count + this._skipLeadingZero();\n    }\n  }, {\n    key: \"readUEG\",\n    value: function readUEG() {\n      // unsigned exponential golomb\n      var leading_zeros = this._skipLeadingZero();\n\n      return this.readBits(leading_zeros + 1) - 1;\n    }\n  }, {\n    key: \"readSEG\",\n    value: function readSEG() {\n      // signed exponential golomb\n      var value = this.readUEG();\n\n      if (value & 0x01) {\n        return value + 1 >>> 1;\n      } else {\n        return -1 * (value >>> 1);\n      }\n    }\n  }]);\n\n  return ExpGolomb;\n}();\n\nexport default ExpGolomb;","map":{"version":3,"sources":["D:/STREAMING_SITE/client/node_modules/flv.js/src/demux/exp-golomb.js"],"names":["IllegalStateException","InvalidArgumentException","ExpGolomb","uint8array","TAG","_buffer","_buffer_index","_total_bytes","byteLength","_total_bits","_current_word","_current_word_bits_left","buffer_bytes_left","bytes_read","Math","min","word","Uint8Array","set","subarray","DataView","buffer","getUint32","bits","result","bits_need_left","_fillCurrentWord","bits_read_next","result2","readBits","zero_count","_skipLeadingZero","leading_zeros","value","readUEG"],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IllegalStateException, InvalidArgumentException} from '../utils/exception.js';\n\n// Exponential-Golomb buffer decoder\nclass ExpGolomb {\n\n    constructor(uint8array) {\n        this.TAG = 'ExpGolomb';\n\n        this._buffer = uint8array;\n        this._buffer_index = 0;\n        this._total_bytes = uint8array.byteLength;\n        this._total_bits = uint8array.byteLength * 8;\n        this._current_word = 0;\n        this._current_word_bits_left = 0;\n    }\n\n    destroy() {\n        this._buffer = null;\n    }\n\n    _fillCurrentWord() {\n        let buffer_bytes_left = this._total_bytes - this._buffer_index;\n        if (buffer_bytes_left <= 0)\n            throw new IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');\n\n        let bytes_read = Math.min(4, buffer_bytes_left);\n        let word = new Uint8Array(4);\n        word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\n        this._current_word = new DataView(word.buffer).getUint32(0, false);\n\n        this._buffer_index += bytes_read;\n        this._current_word_bits_left = bytes_read * 8;\n    }\n\n    readBits(bits) {\n        if (bits > 32)\n            throw new InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');\n\n        if (bits <= this._current_word_bits_left) {\n            let result = this._current_word >>> (32 - bits);\n            this._current_word <<= bits;\n            this._current_word_bits_left -= bits;\n            return result;\n        }\n\n        let result = this._current_word_bits_left ? this._current_word : 0;\n        result = result >>> (32 - this._current_word_bits_left);\n        let bits_need_left = bits - this._current_word_bits_left;\n\n        this._fillCurrentWord();\n        let bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\n\n        let result2 = this._current_word >>> (32 - bits_read_next);\n        this._current_word <<= bits_read_next;\n        this._current_word_bits_left -= bits_read_next;\n\n        result = (result << bits_read_next) | result2;\n        return result;\n    }\n\n    readBool() {\n        return this.readBits(1) === 1;\n    }\n\n    readByte() {\n        return this.readBits(8);\n    }\n\n    _skipLeadingZero() {\n        let zero_count;\n        for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\n            if (0 !== (this._current_word & (0x80000000 >>> zero_count))) {\n                this._current_word <<= zero_count;\n                this._current_word_bits_left -= zero_count;\n                return zero_count;\n            }\n        }\n        this._fillCurrentWord();\n        return zero_count + this._skipLeadingZero();\n    }\n\n    readUEG() {  // unsigned exponential golomb\n        let leading_zeros = this._skipLeadingZero();\n        return this.readBits(leading_zeros + 1) - 1;\n    }\n\n    readSEG() {  // signed exponential golomb\n        let value = this.readUEG();\n        if (value & 0x01) {\n            return (value + 1) >>> 1;\n        } else {\n            return -1 * (value >>> 1);\n        }\n    }\n\n}\n\nexport default ExpGolomb;"]},"metadata":{},"sourceType":"module"}