{"ast":null,"code":"var _jsxFileName = \"D:\\\\STREAMING_SITE\\\\client\\\\src\\\\component\\\\streams\\\\StreamForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass StreamForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false\n    };\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"fieldLabel\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          autoComplete: \"off\",\n          className: \"text-field\",\n          placeholder: label,\n          ...input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this), this.renderError(meta)]\n      }, void 0, true);\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues);\n      this.props.snack(true);\n    };\n  }\n\n  // FOR SNACKBARS\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            name: \"title\",\n            component: this.renderInput,\n            label: \"Enter Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            name: \"description\",\n            component: this.renderInput,\n            label: \"Enter Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit_btn\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a Description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate,\n  snack: 'sucSnack'\n})(StreamForm);","map":{"version":3,"sources":["D:/STREAMING_SITE/client/src/component/streams/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","Component","state","open","renderInput","input","label","meta","renderError","onSubmit","formValues","props","snack","error","touched","render","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,YAA/B;;;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAwC;AAAA;AAAA;AAAA,SACpCC,KADoC,GAC9B;AACFC,MAAAA,IAAI,EAAC;AADH,KAD8B;;AAAA,SAepCC,WAfoC,GAexB,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAD,KAAwB;AAEhC,0BACI;AAAA,gCACI;AAAO,UAAA,SAAS,EAAC,YAAjB;AAAA,oBAA+BD;AAA/B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAO,UAAA,YAAY,EAAC,KAApB;AAA0B,UAAA,SAAS,EAAC,YAApC;AAAiD,UAAA,WAAW,EAAEA,KAA9D;AAAA,aAAyED;AAAzE;AAAA;AAAA;AAAA;AAAA,gBAHJ,EAIK,KAAKG,WAAL,CAAiBD,IAAjB,CAJL;AAAA,sBADJ;AAQH,KAzBmC;;AAAA,SA2BpCE,QA3BoC,GA2BzBC,UAAD,IAAc;AACpB,WAAKC,KAAL,CAAWF,QAAX,CAAoBC,UAApB;AACA,WAAKC,KAAL,CAAWC,KAAX,CAAiB,IAAjB;AACH,KA9BmC;AAAA;;AAIpC;AAEAJ,EAAAA,WAAW,CAAC;AAACK,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAkB;AACzB,QAAGA,OAAO,IAAID,KAAd,EAAoB;AAChB,0BACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,kBACKA;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH;AACJ;;AAkBDE,EAAAA,MAAM,GAAE;AACA,wBACA;AAAA,6BACA;AAAM,QAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWK,YAAX,CAAwB,KAAKP,QAA7B,CAAhB;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,kCACA,QAAC,KAAD;AAAQ,YAAA,IAAI,EAAC,OAAb;AAAqB,YAAA,SAAS,EAAG,KAAKL,WAAtC;AAAmD,YAAA,KAAK,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,aAAZ;AAA0B,YAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,YAAA,KAAK,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA,kBAFA,eAGA;AAAS,YAAA,SAAS,EAAC,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA,qBADA;AAWP;;AA5CmC;;AA+CxC,MAAMa,QAAQ,GAAIP,UAAD,IAAe;AAC5B,QAAMQ,MAAM,GAAC,EAAb;;AAEA,MAAG,CAACR,UAAU,CAACS,KAAf,EAAqB;AACjBD,IAAAA,MAAM,CAACC,KAAP,GAAa,wBAAb;AACH;;AACD,MAAG,CAACT,UAAU,CAACU,WAAf,EAA2B;AACvBF,IAAAA,MAAM,CAACE,WAAP,GAAmB,8BAAnB;AACH;;AACD,SAAOF,MAAP;AACH,CAVD;;AAcA,eAAenB,SAAS,CAAC;AACrBsB,EAAAA,IAAI,EAAE,YADe;AAErBJ,EAAAA,QAFqB;AAGrBL,EAAAA,KAAK,EAAE;AAHc,CAAD,CAAT,CAIZZ,UAJY,CAAf","sourcesContent":["import React from 'react'\r\nimport {Field, reduxForm} from 'redux-form'\r\n\r\nclass StreamForm extends React.Component{\r\n    state={\r\n        open:false,\r\n    }\r\n    // FOR SNACKBARS\r\n\r\n    renderError({error, touched}){\r\n        if(touched && error){\r\n            return(\r\n                <div className=\"error-message\">\r\n                    {error}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    renderInput=({input, label, meta})=>{\r\n\r\n        return (\r\n            <>\r\n                <label className=\"fieldLabel\">{label}</label>\r\n                <br />\r\n                <input autoComplete=\"off\" className=\"text-field\" placeholder={label} {...input}/>\r\n                {this.renderError(meta)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    onSubmit =(formValues)=>{\r\n        this.props.onSubmit(formValues)\r\n        this.props.snack(true)\r\n    }\r\n    \r\n    render(){\r\n            return(\r\n            <>\r\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} >\r\n                <div className=\"field\">\r\n                <Field  name=\"title\" component ={this.renderInput} label=\"Enter Title\"/>\r\n                <Field name=\"description\" component={this.renderInput} label=\"Enter Description\"/>\r\n                <button  className=\"submit_btn\">Submit</button>\r\n                </div >\r\n            </form>\r\n            </>\r\n    )\r\n    }\r\n}\r\n\r\nconst validate = (formValues) =>{\r\n    const errors={}\r\n\r\n    if(!formValues.title){\r\n        errors.title='You must enter a title'\r\n    }\r\n    if(!formValues.description){\r\n        errors.description=\"You must enter a Description\"\r\n    }\r\n    return errors\r\n}\r\n\r\n\r\n\r\nexport default reduxForm({\r\n    form: 'streamForm',\r\n    validate,\r\n    snack: 'sucSnack'\r\n})(StreamForm)"]},"metadata":{},"sourceType":"module"}