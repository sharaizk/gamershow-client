{"ast":null,"code":"var _jsxFileName = \"D:\\\\STREAMING_SITE\\\\client\\\\src\\\\component\\\\streams\\\\StreamShow.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\nimport flv from 'flv.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n    this.buildPlayer();\n  }\n\n  componentDidUpdate() {\n    this.buildPlayer();\n  }\n\n  componentWillUnmount() {\n    this.player.destroy();\n  }\n\n  buildPlayer() {\n    if (this.player || !this.props.stream) {\n      return;\n    } else {\n      this.player = flv.createPlayer({\n        type: 'flv',\n        url: `http://localhost:8000/live/${this.props.match.params.id}.flv`\n      });\n      this.player.attachMediaElement(this.videoRef.current);\n      this.player.load();\n    }\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 20\n      }, this);\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" cont\",\n      style: {\n        margin: '10px 0px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: this.videoRef,\n        controls: true,\n        className: \"videoPlayer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"streamHeader\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"streamDesc\",\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.stream[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["D:/STREAMING_SITE/client/src/component/streams/StreamShow.js"],"names":["React","connect","fetchStream","flv","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","match","params","id","buildPlayer","componentDidUpdate","componentWillUnmount","player","destroy","stream","createPlayer","type","url","attachMediaElement","current","load","render","title","description","margin","mapStateToProps","state","ownProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,OAAOC,GAAP,MAAgB,QAAhB;;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAwC;AAEpCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,QAAL,gBAAgBR,KAAK,CAACS,SAAN,EAAhB;AACH;;AAEDC,EAAAA,iBAAiB,GAAE;AACf,SAAKH,KAAL,CAAWL,WAAX,CAAuB,KAAKK,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACA,SAAKC,WAAL;AACH;;AAEDC,EAAAA,kBAAkB,GAAE;AAChB,SAAKD,WAAL;AACH;;AAEDE,EAAAA,oBAAoB,GAAE;AAClB,SAAKC,MAAL,CAAYC,OAAZ;AACH;;AACDJ,EAAAA,WAAW,GAAE;AACT,QAAI,KAAKG,MAAL,IAAe,CAAC,KAAKV,KAAL,CAAWY,MAA/B,EAAsC;AAClC;AACH,KAFD,MAII;AACA,WAAKF,MAAL,GAAYd,GAAG,CAACiB,YAAJ,CAAiB;AACzBC,QAAAA,IAAI,EAAC,KADoB;AAEzBC,QAAAA,GAAG,EAAG,8BAA6B,KAAKf,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,CAAwBC,EAAG;AAFrC,OAAjB,CAAZ;AAIA,WAAKI,MAAL,CAAYM,kBAAZ,CAA+B,KAAKf,QAAL,CAAcgB,OAA7C;AACA,WAAKP,MAAL,CAAYQ,IAAZ;AACH;AACJ;;AAEDC,EAAAA,MAAM,GAAE;AACJ,QAAG,CAAC,KAAKnB,KAAL,CAAWY,MAAf,EAAsB;AAClB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAED,UAAM;AAACQ,MAAAA,KAAD;AAAOC,MAAAA;AAAP,QAAsB,KAAKrB,KAAL,CAAWY,MAAvC;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,KAAK,EAAE;AAACU,QAAAA,MAAM,EAAE;AAAT,OAA9B;AAAA,8BACI;AAAO,QAAA,GAAG,EAAE,KAAKrB,QAAjB;AAA2B,QAAA,QAAQ,MAAnC;AAAoC,QAAA,SAAS,EAAC;AAA9C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA,kBAA8BmB;AAA9B;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,kBAA4BC;AAA5B;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAhDmC;;AAmDxC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAOC,QAAP,KAAmB;AACvC,SAAM;AACFb,IAAAA,MAAM,EAAEY,KAAK,CAACZ,MAAN,CAAaa,QAAQ,CAACrB,KAAT,CAAeC,MAAf,CAAsBC,EAAnC;AADN,GAAN;AAGH,CAJD;;AAMA,eAAeZ,OAAO,CAAC6B,eAAD,EAAkB;AAAC5B,EAAAA;AAAD,CAAlB,CAAP,CAAwCE,UAAxC,CAAf","sourcesContent":["import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {fetchStream} from '../../actions'\r\nimport flv from 'flv.js'\r\n\r\nclass StreamShow extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.videoRef = React.createRef()\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.fetchStream(this.props.match.params.id)\r\n        this.buildPlayer()\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.buildPlayer()\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.player.destroy()\r\n    }\r\n    buildPlayer(){\r\n        if (this.player || !this.props.stream){\r\n            return\r\n        }\r\n\r\n        else{\r\n            this.player=flv.createPlayer({\r\n                type:'flv',\r\n                url: `http://localhost:8000/live/${this.props.match.params.id}.flv`\r\n            })\r\n            this.player.attachMediaElement(this.videoRef.current)\r\n            this.player.load()\r\n        }\r\n    }\r\n\r\n    render(){\r\n        if(!this.props.stream){\r\n            return <div>Loading</div>\r\n        }\r\n\r\n        const {title,description} = this.props.stream\r\n\r\n        return(\r\n            <div className=\" cont\" style={{margin: '10px 0px'}}>\r\n                <video ref={this.videoRef} controls className=\"videoPlayer\"/>\r\n                <h1 className=\"streamHeader\">{title}</h1>\r\n                <h3 className=\"streamDesc\">{description}</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state,ownProps) =>{\r\n    return{\r\n        stream: state.stream[ownProps.match.params.id]\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {fetchStream})(StreamShow)"]},"metadata":{},"sourceType":"module"}