{"ast":null,"code":"var _jsxFileName = \"D:\\\\STREAMING_SITE\\\\client\\\\src\\\\component\\\\streams\\\\StreamForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport history from '../../history';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Alert(props) {\n  return /*#__PURE__*/_jsxDEV(MuiAlert, {\n    elevation: 6,\n    variant: \"filled\",\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 12\n  }, this);\n}\n\n_c = Alert;\n\nclass StreamForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false\n    };\n\n    this.handleClose = async (event, reason) => {\n      if (reason === 'clickaway') {\n        return;\n      }\n\n      this.setState({\n        open: false\n      });\n      await this.props.sucSnack(false);\n      history.push('/');\n    };\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"fieldLabel\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          autoComplete: \"off\",\n          className: \"text-field\",\n          placeholder: label,\n          ...input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this), this.renderError(meta)]\n      }, void 0, true);\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues);\n      this.props.snack(true);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      load: true\n    });\n    setTimeout(() => {\n      this.setState({\n        load: false\n      });\n    }, 2500);\n  } // FOR SNACKBARS\n\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            name: \"title\",\n            component: this.renderInput,\n            label: \"Enter Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            name: \"description\",\n            component: this.renderInput,\n            label: \"Enter Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit_btn\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n        open: this.props.sucsnack,\n        onClose: this.handleClose,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: this.handleClose,\n          severity: \"success\",\n          children: \"Stream Created\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a Description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate,\n  snack: 'sucSnack'\n})(StreamForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"Alert\");","map":{"version":3,"sources":["D:/STREAMING_SITE/client/src/component/streams/StreamForm.js"],"names":["React","Field","reduxForm","Snackbar","MuiAlert","history","Alert","props","StreamForm","Component","state","open","handleClose","event","reason","setState","sucSnack","push","renderInput","input","label","meta","renderError","onSubmit","formValues","snack","componentDidMount","load","setTimeout","error","touched","render","handleSubmit","sucsnack","validate","errors","title","description","form"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport history from '../../history'\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\nclass StreamForm extends React.Component{\r\n    state={\r\n        open:false,\r\n    }\r\n    componentDidMount(){\r\n        this.setState({load:true})\r\n        setTimeout(()=>{\r\n            this.setState({load:false})\r\n        },2500)\r\n    }\r\n    // FOR SNACKBARS\r\n    handleClose = async(event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n        this.setState({\r\n            open:false\r\n        })\r\n        await this.props.sucSnack(false)\r\n        history.push('/')\r\n    };\r\n\r\n    renderError({error, touched}){\r\n        if(touched && error){\r\n            return(\r\n                <div className=\"error-message\">\r\n                    {error}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    renderInput=({input, label, meta})=>{\r\n\r\n        return (\r\n            <>\r\n                <label className=\"fieldLabel\">{label}</label>\r\n                <br />\r\n                <input autoComplete=\"off\" className=\"text-field\" placeholder={label} {...input}/>\r\n                {this.renderError(meta)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    onSubmit =(formValues)=>{\r\n        this.props.onSubmit(formValues)\r\n        this.props.snack(true)\r\n    }\r\n    \r\n    render(){\r\n            return(\r\n            <>\r\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} >\r\n                <div className=\"field\">\r\n                <Field  name=\"title\" component ={this.renderInput} label=\"Enter Title\"/>\r\n                <Field name=\"description\" component={this.renderInput} label=\"Enter Description\"/>\r\n                <button  className=\"submit_btn\">Submit</button>\r\n                </div >\r\n            </form>\r\n            {/* autoHideDuration={2000} */}\r\n            <Snackbar open={this.props.sucsnack}  onClose={this.handleClose}>\r\n                <Alert onClose={this.handleClose} severity=\"success\">\r\n                    Stream Created\r\n                </Alert>\r\n            </Snackbar>\r\n            </>\r\n    )\r\n    }\r\n}\r\n\r\nconst validate = (formValues) =>{\r\n    const errors={}\r\n\r\n    if(!formValues.title){\r\n        errors.title='You must enter a title'\r\n    }\r\n    if(!formValues.description){\r\n        errors.description=\"You must enter a Description\"\r\n    }\r\n    return errors\r\n}\r\n\r\n\r\n\r\nexport default reduxForm({\r\n    form: 'streamForm',\r\n    validate,\r\n    snack: 'sucSnack'\r\n})(StreamForm)"]},"metadata":{},"sourceType":"module"}