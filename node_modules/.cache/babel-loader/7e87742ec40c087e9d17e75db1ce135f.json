{"ast":null,"code":"var _jsxFileName = \"D:\\\\STREAMING_SITE\\\\client\\\\src\\\\component\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\nimport { css } from \"@emotion/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Alert(props) {\n  return /*#__PURE__*/_jsxDEV(MuiAlert, {\n    elevation: 6,\n    variant: \"filled\",\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 12\n  }, this);\n}\n\n_c = Alert;\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      load: null\n    };\n\n    this.handleClose = (event, reason) => {\n      if (reason === 'clickaway') {\n        return;\n      }\n\n      this.setState({\n        open: false\n      });\n      window.location.reload(false);\n    };\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"fieldLabel\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          autoComplete: \"off\",\n          className: \"text-field\",\n          placeholder: label,\n          ...input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this), this.renderError(meta)]\n      }, void 0, true);\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n      this.setState({\n        open: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      load: true\n    });\n    setTimeout(() => {\n      this.setState({\n        load: false\n      });\n    }, 8000);\n  } // FOR SNACKBARS\n\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  render() {\n    if (this.state.load) {\n      return /*#__PURE__*/_jsxDEV(ClimbingBoxLoader, {\n        color: \"orange\",\n        loading: this.state.load,\n        size: 50\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"createStream\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"createForm\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            id: \"createLabel\",\n            children: \"Create Stream\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.props.handleSubmit(this.onSubmit),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"field\",\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                name: \"title\",\n                component: this.renderInput,\n                label: \"Enter Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                name: \"description\",\n                component: this.renderInput,\n                label: \"Enter Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"submit_btn\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n            open: this.state.open,\n            autoHideDuration: 2000,\n            onClose: this.handleClose,\n            children: /*#__PURE__*/_jsxDEV(Alert, {\n              onClose: this.handleClose,\n              severity: \"success\",\n              children: \"Stream Created\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a Description\";\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrapped);\n\nvar _c;\n\n$RefreshReg$(_c, \"Alert\");","map":{"version":3,"sources":["D:/STREAMING_SITE/client/src/component/streams/StreamCreate.js"],"names":["React","Field","reduxForm","connect","createStream","Snackbar","MuiAlert","ClimbingBoxLoader","css","Alert","props","StreamCreate","Component","state","open","load","handleClose","event","reason","setState","window","location","reload","renderInput","input","label","meta","renderError","onSubmit","formValues","componentDidMount","setTimeout","error","touched","render","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport {connect} from 'react-redux'\r\nimport {createStream} from '../../actions'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\r\nimport { css } from \"@emotion/core\";\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nclass StreamCreate extends React.Component{\r\n    state={\r\n        open:false,\r\n        load: null\r\n    }\r\n    componentDidMount(){\r\n        this.setState({load:true})\r\n        setTimeout(()=>{\r\n            this.setState({load:false})\r\n        },8000)\r\n    }\r\n    // FOR SNACKBARS\r\n    handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n        this.setState({\r\n            open:false\r\n        })\r\n        window.location.reload(false)\r\n    };\r\n\r\n    renderError({error, touched}){\r\n        if(touched && error){\r\n            return(\r\n                <div className=\"error-message\">\r\n                    {error}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    renderInput=({input, label, meta})=>{\r\n\r\n        return (\r\n            <>\r\n                <label className=\"fieldLabel\">{label}</label>\r\n                <br />\r\n                <input autoComplete=\"off\" className=\"text-field\" placeholder={label} {...input}/>\r\n                {this.renderError(meta)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    onSubmit =(formValues)=>{\r\n        this.props.createStream(formValues)\r\n        this.setState({open: true})\r\n    }\r\n    \r\n    render(){\r\n\r\n    if(this.state.load){\r\n        return(\r\n            \r\n            <ClimbingBoxLoader color={\"orange\"} loading={this.state.load} size={50} />\r\n        )\r\n    }\r\n    else{\r\n            return(\r\n        <div className=\"createStream\">\r\n            <div className=\"createForm\">\r\n            <h4 id=\"createLabel\">Create Stream</h4>\r\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} >\r\n                <div className=\"field\">\r\n                <Field  name=\"title\" component ={this.renderInput} label=\"Enter Title\"/>\r\n                <Field name=\"description\" component={this.renderInput} label=\"Enter Description\"/>\r\n                <button  className=\"submit_btn\">Submit</button>\r\n                </div >\r\n            </form>\r\n            <Snackbar open={this.state.open} autoHideDuration={2000} onClose={this.handleClose}>\r\n                <Alert onClose={this.handleClose} severity=\"success\">\r\n                    Stream Created\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n        </div>\r\n    )\r\n    }\r\n    }\r\n}\r\n\r\nconst validate = (formValues) =>{\r\n    const errors={}\r\n\r\n    if(!formValues.title){\r\n        errors.title='You must enter a title'\r\n    }\r\n    if(!formValues.description){\r\n        errors.description=\"You must enter a Description\"\r\n    }\r\n    return errors\r\n}\r\n\r\nconst formWrapped = reduxForm({\r\n    form: 'streamCreate',\r\n    validate\r\n})(StreamCreate)\r\n\r\nexport default connect(null, {createStream})(formWrapped)"]},"metadata":{},"sourceType":"module"}