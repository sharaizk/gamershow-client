{"ast":null,"code":"var _jsxFileName = \"D:\\\\STREAMING_SITE\\\\client\\\\src\\\\component\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStream, sucSnack } from '../../actions';\nimport StreamForm from './StreamForm';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport CircleLoader from \"react-spinners/CircleLoader\";\nimport history from '../../history';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Alert(props) {\n  return /*#__PURE__*/_jsxDEV(MuiAlert, {\n    elevation: 6,\n    variant: \"filled\",\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 12\n  }, this);\n}\n\n_c = Alert;\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      load: null\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n      this.props.sucSnack(true);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      load: true\n    });\n    setTimeout(() => {\n      this.setState({\n        load: false\n      });\n    }, 2500);\n  } // FOR SNACKBARS\n  // handleClose = async(event, reason) => {\n  //     if (reason === 'clickaway') {\n  //       return;\n  //     }\n  //     this.setState({\n  //         open:false\n  //     })\n  //     await this.props.sucSnack(false)\n  //     history.push('/')\n  // };\n  // renderError({error, touched}){\n  //     if(touched && error){\n  //         return(\n  //             <div className=\"error-message\">\n  //                 {error}\n  //             </div>\n  //         )\n  //     }\n  // }\n  // renderInput=({input, label, meta})=>{\n  //     return (\n  //         <>\n  //             <label className=\"fieldLabel\">{label}</label>\n  //             <br />\n  //             <input autoComplete=\"off\" className=\"text-field\" placeholder={label} {...input}/>\n  //             {this.renderError(meta)}\n  //         </>\n  //     )\n  // }\n\n\n  render() {\n    if (this.state.load) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Loader\",\n        children: /*#__PURE__*/_jsxDEV(CircleLoader, {\n          color: \"#66FCF1\",\n          loading: this.state.load,\n          size: 50\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"createStream\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"createForm\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            id: \"createLabel\",\n            children: \"Create Stream\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StreamForm, {\n            onSubmit: this.onSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n} // const validate = (formValues) =>{\n//     const errors={}\n//     if(!formValues.title){\n//         errors.title='You must enter a title'\n//     }\n//     if(!formValues.description){\n//         errors.description=\"You must enter a Description\"\n//     }\n//     return errors\n// }\n\n\nconst mapStateToProps = state => {\n  return {\n    sucsnack: state.sucsnack\n  };\n}; // const formWrapped = reduxForm({\n//     form: 'streamCreate',\n//     validate,\n//     snack: 'sucSnack'\n// })(StreamCreate)\n\n\nexport default connect(mapStateToProps, {\n  createStream,\n  sucSnack\n})(StreamCreate);\n\nvar _c;\n\n$RefreshReg$(_c, \"Alert\");","map":{"version":3,"sources":["D:/STREAMING_SITE/client/src/component/streams/StreamCreate.js"],"names":["React","connect","createStream","sucSnack","StreamForm","Snackbar","MuiAlert","CircleLoader","history","Alert","props","StreamCreate","Component","state","open","load","onSubmit","formValues","componentDidMount","setState","setTimeout","render","mapStateToProps","sucsnack"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,YAAR,EAAsBC,QAAtB,QAAqC,eAArC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,OAAP,MAAoB,eAApB;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAClB,sBAAO,QAAC,QAAD;AAAU,IAAA,SAAS,EAAE,CAArB;AAAwB,IAAA,OAAO,EAAC,QAAhC;AAAA,OAA6CA;AAA7C;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;KAFQD,K;;AAGT,MAAME,YAAN,SAA2BX,KAAK,CAACY,SAAjC,CAA0C;AAAA;AAAA;AAAA,SACtCC,KADsC,GAChC;AACFC,MAAAA,IAAI,EAAC,KADH;AAEFC,MAAAA,IAAI,EAAE;AAFJ,KADgC;;AAAA,SA4CtCC,QA5CsC,GA4C3BC,UAAD,IAAc;AACpB,WAAKP,KAAL,CAAWR,YAAX,CAAwBe,UAAxB;AACA,WAAKP,KAAL,CAAWP,QAAX,CAAoB,IAApB;AACH,KA/CqC;AAAA;;AAKtCe,EAAAA,iBAAiB,GAAE;AACf,SAAKC,QAAL,CAAc;AAACJ,MAAAA,IAAI,EAAC;AAAN,KAAd;AACAK,IAAAA,UAAU,CAAC,MAAI;AACX,WAAKD,QAAL,CAAc;AAACJ,QAAAA,IAAI,EAAC;AAAN,OAAd;AACH,KAFS,EAER,IAFQ,CAAV;AAGH,GAVqC,CAWtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAOAM,EAAAA,MAAM,GAAE;AACR,QAAG,KAAKR,KAAL,CAAWE,IAAd,EAAmB;AACf,0BACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACA,QAAC,YAAD;AAAc,UAAA,KAAK,EAAE,SAArB;AAAgC,UAAA,OAAO,EAAE,KAAKF,KAAL,CAAWE,IAApD;AAA0D,UAAA,IAAI,EAAE;AAAhE;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KAND,MAOI;AACI,0BACJ;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,kCACA;AAAI,YAAA,EAAE,EAAC,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA,QAAC,UAAD;AAAY,YAAA,QAAQ,EAAE,KAAKC;AAA3B;AAAA;AAAA;AAAA;AAAA,kBAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADI;AAQP;AACA;;AAnEqC,C,CAsE1C;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMM,eAAe,GAAET,KAAD,IAAS;AAC3B,SAAM;AACFU,IAAAA,QAAQ,EAAEV,KAAK,CAACU;AADd,GAAN;AAGH,CAJD,C,CAMA;AACA;AACA;AACA;AACA;;;AAEA,eAAetB,OAAO,CAACqB,eAAD,EAAkB;AAACpB,EAAAA,YAAD;AAAeC,EAAAA;AAAf,CAAlB,CAAP,CAAmDQ,YAAnD,CAAf","sourcesContent":["import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {createStream, sucSnack} from '../../actions'\r\nimport StreamForm from './StreamForm'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport CircleLoader from \"react-spinners/CircleLoader\";\r\nimport history from '../../history'\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\nclass StreamCreate extends React.Component{\r\n    state={\r\n        open:false,\r\n        load: null\r\n    }\r\n    componentDidMount(){\r\n        this.setState({load:true})\r\n        setTimeout(()=>{\r\n            this.setState({load:false})\r\n        },2500)\r\n    }\r\n    // FOR SNACKBARS\r\n    // handleClose = async(event, reason) => {\r\n    //     if (reason === 'clickaway') {\r\n    //       return;\r\n    //     }\r\n    //     this.setState({\r\n    //         open:false\r\n    //     })\r\n    //     await this.props.sucSnack(false)\r\n    //     history.push('/')\r\n    // };\r\n\r\n    // renderError({error, touched}){\r\n    //     if(touched && error){\r\n    //         return(\r\n    //             <div className=\"error-message\">\r\n    //                 {error}\r\n    //             </div>\r\n    //         )\r\n    //     }\r\n    // }\r\n    \r\n    // renderInput=({input, label, meta})=>{\r\n    //     return (\r\n    //         <>\r\n    //             <label className=\"fieldLabel\">{label}</label>\r\n    //             <br />\r\n    //             <input autoComplete=\"off\" className=\"text-field\" placeholder={label} {...input}/>\r\n    //             {this.renderError(meta)}\r\n    //         </>\r\n    //     )\r\n    // }\r\n\r\n    onSubmit =(formValues)=>{\r\n        this.props.createStream(formValues)\r\n        this.props.sucSnack(true)\r\n    }\r\n    \r\n    render(){\r\n    if(this.state.load){\r\n        return(\r\n            <div className=\"Loader\">\r\n            <CircleLoader color={\"#66FCF1\"} loading={this.state.load} size={50} />\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n            return(\r\n        <div className=\"createStream\">\r\n            <div className=\"createForm\">\r\n            <h4 id=\"createLabel\">Create Stream</h4>\r\n            <StreamForm onSubmit={this.onSubmit}/>\r\n        </div>\r\n        </div>\r\n    )\r\n    }\r\n    }\r\n}\r\n\r\n// const validate = (formValues) =>{\r\n//     const errors={}\r\n\r\n//     if(!formValues.title){\r\n//         errors.title='You must enter a title'\r\n//     }\r\n//     if(!formValues.description){\r\n//         errors.description=\"You must enter a Description\"\r\n//     }\r\n//     return errors\r\n// }\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return{\r\n        sucsnack: state.sucsnack\r\n    }\r\n}\r\n\r\n// const formWrapped = reduxForm({\r\n//     form: 'streamCreate',\r\n//     validate,\r\n//     snack: 'sucSnack'\r\n// })(StreamCreate)\r\n\r\nexport default connect(mapStateToProps, {createStream, sucSnack})(StreamCreate)"]},"metadata":{},"sourceType":"module"}