{"ast":null,"code":"import server from '../api/server';\nimport history from '../history';\nimport { loadState, saveState } from '../localStorage';\nimport { store } from '../index';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, DELETE_STREAM, EDIT_STREAM, SUC_SNACK, SIGN_UP, PSIGN_IN, CHK_TKN, PSIGN_OUT } from './types';\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const signUp = (formValues, gender) => {\n  const {\n    name,\n    username,\n    email,\n    password\n  } = formValues;\n  return async dispatch => {\n    try {\n      const response = await server.post('/register', {\n        name,\n        username,\n        email,\n        password,\n        gender\n      });\n      dispatch({\n        type: SIGN_UP,\n        payload: response.data.userId\n      });\n      history.push('/login');\n    } catch (e) {\n      alert(e.response.data.error);\n    }\n  };\n};\nexport const psignIn = formValues => {\n  const {\n    username,\n    password\n  } = formValues;\n  return async dispatch => {\n    try {\n      const response = await server.post('/streams/new', {\n        username,\n        password\n      });\n      console.log(response);\n\n      if (response.status !== 400) {\n        const data = await res.json();\n        dispatch({\n          type: PSIGN_IN,\n          payload: data._id\n        });\n        await saveState(store.getState().pauth);\n        history.push('/home');\n      } else {\n        const error = new Error(\"Invalid Credentials\");\n        throw error;\n      }\n    } catch (e) {\n      alert(e);\n    }\n  };\n};\nexport const psignOut = () => {\n  return async dispatch => {\n    dispatch({\n      type: PSIGN_OUT\n    });\n    saveState(store.getState().pauth);\n    history.push('/');\n  };\n};\nexport const chkToken = () => {\n  return dispatch => {\n    try {\n      const data = loadState();\n\n      if (data === undefined || data.isSignedIn === false) {\n        const ERROR = new Error(\"USER NOT LOGGED IN\");\n        throw ERROR;\n      } else {\n        dispatch({\n          type: CHK_TKN,\n          payload: data\n        });\n      }\n    } catch (e) {\n      alert(e);\n      history.push('/');\n    }\n  };\n};\nexport const createStream = formValues => {\n  return async (dispatch, getState) => {\n    const {\n      userId\n    } = getState().pauth;\n    const response = await server.post('/streams/new', { ...formValues,\n      userId\n    });\n    dispatch({\n      type: CREATE_STREAM,\n      payload: response.data\n    });\n  };\n};\nexport const fetchStreams = () => {\n  return async dispatch => {\n    const response = await server.get('/streams');\n    console.log(response.data);\n    dispatch({\n      type: FETCH_STREAMS,\n      payload: response.data\n    });\n  };\n};\nexport const fetchStream = id => {\n  return async dispatch => {\n    const response = await server.get(`/streams/${id}`);\n    dispatch({\n      type: FETCH_STREAM,\n      payload: response.data\n    });\n  };\n};\nexport const editStream = (id, formValues) => {\n  return async dispatch => {\n    const response = await server.patch(`/streams/edit/${id}`, { ...formValues\n    });\n    dispatch({\n      type: EDIT_STREAM,\n      payload: response.data\n    });\n  };\n};\nexport const deleteStream = id => {\n  return async dispatch => {\n    await server.delete(`/streams/delete/${id}`);\n    dispatch({\n      type: DELETE_STREAM,\n      payload: id\n    });\n    history.push('/streams/list');\n  };\n};\nexport const sucSnack = status => {\n  return {\n    type: SUC_SNACK,\n    payload: status\n  };\n};","map":{"version":3,"sources":["D:/STREAMING_SITE/client/src/actions/index.js"],"names":["server","history","loadState","saveState","store","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","DELETE_STREAM","EDIT_STREAM","SUC_SNACK","SIGN_UP","PSIGN_IN","CHK_TKN","PSIGN_OUT","signIn","userId","type","payload","signOut","signUp","formValues","gender","name","username","email","password","dispatch","response","post","data","push","e","alert","error","psignIn","console","log","status","res","json","_id","getState","pauth","Error","psignOut","chkToken","undefined","isSignedIn","ERROR","createStream","fetchStreams","get","fetchStream","id","editStream","patch","deleteStream","delete","sucSnack"],"mappings":"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","sourcesContent":["import server from '../api/server'\r\nimport history from '../history'\r\nimport {loadState, saveState} from '../localStorage'\r\nimport {store} from '../index';\r\nimport {\r\n    SIGN_IN, \r\n    SIGN_OUT, \r\n    CREATE_STREAM,\r\n    FETCH_STREAMS,\r\n    FETCH_STREAM,\r\n    DELETE_STREAM,\r\n    EDIT_STREAM,\r\n    SUC_SNACK,\r\n    SIGN_UP,\r\n    PSIGN_IN,CHK_TKN, PSIGN_OUT\r\n} from './types'\r\n\r\nexport const signIn = (userId) =>{\r\n    return{\r\n        type: SIGN_IN,\r\n        payload:userId\r\n    }\r\n}\r\n\r\nexport const signOut = () =>{\r\n    return{\r\n        type: SIGN_OUT\r\n    }\r\n}\r\nexport const signUp=(formValues,gender)=>{\r\n    const{name, username,email,password}=formValues\r\n    return async(dispatch)=>{\r\n        try{\r\n            const response = await server.post('/register',{name, username,email,password,gender})\r\n            dispatch({type: SIGN_UP, payload:response.data.userId})\r\n            history.push('/login')\r\n        }\r\n        catch(e){\r\n            alert(e.response.data.error)\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const psignIn = (formValues)=>{\r\n    const{username, password}=formValues\r\n    return async(dispatch)=>{\r\n        try{\r\n            const response = await server.post('/streams/new',{username,password})\r\n            console.log(response)\r\n            if(response.status !== 400){\r\n                const data= await res.json()\r\n                dispatch({type:PSIGN_IN, payload:data._id})   \r\n                await saveState(store.getState().pauth)\r\n                history.push('/home')\r\n            }\r\n            else{\r\n                const error = new Error(\"Invalid Credentials\")\r\n                throw error\r\n            }\r\n        }\r\n        catch(e){\r\n            alert(e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const psignOut = ()=>{\r\n    return async (dispatch) =>{\r\n        dispatch({type:PSIGN_OUT})\r\n        saveState(store.getState().pauth)\r\n        history.push('/')\r\n    }\r\n}\r\n\r\nexport const chkToken=()=>{\r\n    return (dispatch) =>{\r\n        try{\r\n            const data = loadState()\r\n            if(data === undefined || data.isSignedIn === false){\r\n                const ERROR = new Error(\"USER NOT LOGGED IN\")\r\n                throw ERROR\r\n            }\r\n            else{\r\n                dispatch({type:CHK_TKN, payload: data})\r\n            }\r\n            }\r\n            catch(e){\r\n                alert(e)\r\n                history.push('/')\r\n            }\r\n    }\r\n}\r\n\r\nexport const createStream = (formValues) =>{\r\n    return async (dispatch, getState) =>{\r\n        const {userId} = getState().pauth\r\n        const response = await server.post('/streams/new',{...formValues, userId})\r\n        dispatch({type: CREATE_STREAM, payload: response.data})\r\n    }\r\n}\r\n\r\nexport const fetchStreams = () =>{\r\n    return async (dispatch) =>{\r\n        const response = await server.get('/streams')\r\n        console.log(response.data)\r\n        dispatch({type:FETCH_STREAMS, payload: response.data})\r\n    }\r\n}\r\n\r\nexport const fetchStream = (id) =>{\r\n    return async(dispatch) =>{\r\n        const response = await server.get(`/streams/${id}`)\r\n        dispatch({type: FETCH_STREAM, payload: response.data})\r\n    }\r\n}\r\n\r\nexport const editStream = (id, formValues) =>{\r\n    return async(dispatch)=>{\r\n        const response = await server.patch(`/streams/edit/${id}`, {...formValues})\r\n        dispatch({type:EDIT_STREAM, payload:response.data})\r\n    }\r\n}\r\n\r\nexport const deleteStream = (id)=>{\r\n    return async(dispatch)=>{\r\n        await server.delete(`/streams/delete/${id}`)\r\n        dispatch({type: DELETE_STREAM, payload: id})\r\n        history.push('/streams/list')\r\n    }\r\n}\r\n\r\n\r\nexport const sucSnack = (status) =>{\r\n    return{\r\n        type: SUC_SNACK,\r\n        payload: status\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}